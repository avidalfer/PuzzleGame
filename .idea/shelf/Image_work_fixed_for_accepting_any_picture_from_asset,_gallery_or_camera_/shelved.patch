Index: app/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/build
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/.gitignore	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+++ app/.gitignore	(date 1608978417136)
@@ -1,1 +1,68 @@
-/build
\ No newline at end of file
+# Built application files
+*.apk
+*.ap_
+*.aab
+
+# Files for the ART/Dalvik VM
+*.dex
+
+# Java class files
+*.class
+
+# Generated files
+bin/
+gen/
+out/
+
+# Gradle files
+.gradle/
+build/
+
+# Local configuration file (sdk path, etc)
+local.properties
+
+# Proguard folder generated by Eclipse
+proguard/
+
+# Log Files
+*.log
+
+# Android Studio Navigation editor temp files
+.navigation/
+
+# Android Studio captures folder
+captures/
+
+# IntelliJ
+*.iml
+.idea/workspace.xml
+.idea/tasks.xml
+.idea/gradle.xml
+.idea/assetWizardSettings.xml
+.idea/dictionaries
+.idea/libraries
+.idea/caches
+
+# Keystore files
+# Uncomment the following lines if you do not want to check your keystore
+files in.
+#*.jks
+#*.keystore
+
+# External native build folder generated in Android Studio 2.2 and later
+.externalNativeBuild
+
+# Google Services (e.g. APIs or Firebase)
+google-services.json
+
+# Freeline
+freeline.py
+freeline/
+freeline_project_description.json
+
+# fastlane
+fastlane/report.xml
+fastlane/Preview.html
+fastlane/screenshots
+fastlane/test_output
+fastlane/readme.md
\ No newline at end of file
Index: unnamed.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- unnamed.patch	(date 1608978636763)
+++ unnamed.patch	(date 1608978636763)
@@ -0,0 +1,1436 @@
+Index: app/src/main/AndroidManifest.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/AndroidManifest.xml	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/AndroidManifest.xml	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -1,16 +1,27 @@
+ <?xml version="1.0" encoding="utf-8"?>
+ <manifest xmlns:android="http://schemas.android.com/apk/res/android"
+     package="com.example.puzzlegame">
++
+     <uses-sdk android:minSdkVersion="14" />
+     <uses-permission android:name="android.permission.READ_CALENDAR" />
+     <uses-permission android:name="android.permission.WRITE_CALENDAR" />
+     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
++    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
++    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>
++    <uses-permission android:name="android.permission.CAMERA" />
++    <uses-feature android:name="android.hardware.camera2" android:required="false"/>
++    <queries>
++        <intent>
++            <action android:name="android.media.action.IMAGE_CAPTURE" />
++        </intent>
++    </queries>
+     <application
+         android:icon="@drawable/logo"
+         android:label="@string/app_name"
+         android:roundIcon="@drawable/racoon1"
+         android:supportsRtl="true"
+         android:theme="@style/AppTheme">
++
+         <activity android:name=".Help" />
+         <activity android:name=".ui.halloffame.HallOfFameActivity" />
+         <activity android:name=".ui.winscreen.WinScreenActivity" />
+@@ -28,6 +39,16 @@
+             </intent-filter>
+         </activity>
+         <activity android:name=".ui.gallery.GalleryActivity" />
++        <provider
++            android:name="androidx.core.content.FileProvider"
++            android:authorities="${applicationId}.provider"
++            android:exported="false"
++            android:grantUriPermissions="true">
++            <meta-data
++                android:name="android.support.FILE_PROVIDER_PATHS"
++                android:resource="@xml/file_paths" />
++        </provider>
++
+     </application>
+ 
+ </manifest>
+\ No newline at end of file
+Index: app/src/main/java/com/example/puzzlegame/MainActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/MainActivity.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/MainActivity.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -16,7 +16,6 @@
+ public class MainActivity extends BaseActivity {
+ 
+     Button btn1, btn2;
+-    Button[] buttons;
+     SettingsViewModel settingsViewModel;
+ 
+     @Override
+@@ -27,7 +26,7 @@
+         CommonBarMethods.createToolbar(this);
+         CommonBarMethods.configDefaultAppBar(this);
+         settingsViewModel = new ViewModelProvider(this).get(SettingsViewModel.class);
+-        settingsViewModel.initRepository(getApplication());
++        settingsViewModel.initRepository(this);
+         super.begin();
+         setViews();
+         setListeners();
+Index: app/src/main/java/com/example/puzzlegame/basededatos/AppDataBase.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/basededatos/AppDataBase.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/basededatos/AppDataBase.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -36,7 +36,7 @@
+         Song.class,
+         MusicSettings.class,
+         Score.class
+-}, version = 2)
++}, version = 1)
+ @TypeConverters(UriConverter.class)
+ public abstract class AppDataBase extends RoomDatabase {
+     protected static AppDataBase appDataBase;
+Index: app/src/main/java/com/example/puzzlegame/common/Utils.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/common/Utils.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/common/Utils.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -1,23 +1,25 @@
+ package com.example.puzzlegame.common;
+ 
++import android.Manifest;
++import android.app.Activity;
+ import android.app.Application;
+-import android.content.res.AssetManager;
++import android.content.pm.PackageManager;
+ import android.graphics.Bitmap;
+ import android.graphics.BitmapFactory;
+ import android.graphics.Rect;
+-import android.view.View;
+-import android.widget.Toast;
++import android.net.Uri;
++import android.os.Build;
+ 
+-import androidx.appcompat.app.AppCompatActivity;
++import androidx.annotation.RequiresApi;
++import androidx.core.app.ActivityCompat;
++import androidx.core.content.ContextCompat;
+ 
+ import com.example.puzzlegame.basededatos.AppDataBase;
+ import com.example.puzzlegame.model.Image;
+ import com.example.puzzlegame.model.Piece;
+ import com.example.puzzlegame.model.PieceData;
++import com.example.puzzlegame.ui.gallery.GalleryActivity;
+ 
+-import java.io.File;
+-import java.io.FileInputStream;
+-import java.io.IOException;
+ import java.io.InputStream;
+ import java.util.ArrayList;
+ import java.util.List;
+@@ -27,15 +29,15 @@
+  */
+ public class Utils {
+ 
++    private static final int REQUEST_WRITE_EXTERNAL_STORAGE = 1;
++    private static final int REQUEST_READ_EXTERNAL_STORAGE = 2;
++    private static final int REQUEST_OPEN_DOC_EXTERNAL_STORAGE = 3;
++    private static final int REQUEST_CAPTURE_IMAGE = 4;
++
+     public static AppDataBase getDB(Application application) {
+         return AppDataBase.getAppDataBase(application);
+     }
+ 
+-    public static void TODO(AppCompatActivity activity, View view) {
+-        Toast toast = Toast.makeText(activity.getApplicationContext(), "Function not implemented yet", Toast.LENGTH_SHORT);
+-        toast.show();
+-    }
+-
+     public static String FormatTime(long winTime) {
+         String formatedTime = "";
+ 
+@@ -68,63 +70,31 @@
+         return formatedTime;
+     }
+ 
+-    public static Image createImage(AssetManager assetManager, String src) {
++    public static Image createImage(InputStream is, Uri uri) {
+ 
+         int thumbW = 120;
+         int thumbH = 120;
+ 
+         try {
+-            InputStream is = assetManager.open("img/" + src);
+-
++            String src = uri.toString();
+             BitmapFactory.Options bmOptions = new BitmapFactory.Options();
+             bmOptions.inJustDecodeBounds = true;
+             BitmapFactory.decodeStream(is, new Rect(-1, -1, -1, -1), bmOptions);
+             int photoW = bmOptions.outWidth;
+             int photoH = bmOptions.outHeight;
+ 
+-            is.reset();
+-
+-            Bitmap b = getScaledBitmap(assetManager, src, photoW, thumbW, photoH, thumbH);
++            Bitmap b = getScaledBitmap(is, photoW, thumbW, photoH, thumbH);
+ 
+             return new Image(src, b, photoW, photoH);
+ 
+-        } catch (IOException e) {
++        } catch (Exception e) {
+             e.printStackTrace();
+             return null;
+         }
+     }
+ 
+-    public static Image createImage(String src) {
+-
+-        int thumbW = 120;
+-        int thumbH = 120;
+-
++    public static Bitmap getScaledBitmap(InputStream is, int originalW, int targetW, int originalH, int targetH) {
+         try {
+-            File imageFile = new File(src);
+-            FileInputStream is = new FileInputStream(imageFile);
+-            BitmapFactory.Options bmOptions = new BitmapFactory.Options();
+-            bmOptions.inJustDecodeBounds = true;
+-            BitmapFactory.decodeStream(is, new Rect(-1, -1, -1, -1), bmOptions);
+-            int photoW = bmOptions.outWidth;
+-            int photoH = bmOptions.outHeight;
+-
+-            is.reset();
+-
+-            Bitmap b = getScaledBitmap(src, photoW, thumbW, photoH, thumbH);
+-
+-            return new Image(src, b, photoW, photoH);
+-
+-        } catch (IOException e) {
+-            e.printStackTrace();
+-            return null;
+-        }
+-    }
+-
+-    public static Bitmap getScaledBitmap(AssetManager assetManager, String src, int originalW, int targetW, int originalH, int targetH) {
+-
+-        InputStream is = null;
+-        try {
+-            is = assetManager.open("img/" + src);
+             BitmapFactory.Options bmOptions = new BitmapFactory.Options();
+ 
+             bmOptions.inJustDecodeBounds = false;
+@@ -133,27 +103,7 @@
+             Bitmap b = BitmapFactory.decodeStream(is, new Rect(-1, -1, -1, -1), bmOptions);
+ 
+             return b;
+-        } catch (IOException e) {
+-            e.printStackTrace();
+-            return null;
+-        }
+-    }
+-
+-    public static Bitmap getScaledBitmap(String src, int originalW, int targetW, int originalH, int targetH) {
+-
+-        InputStream is = null;
+-        try {
+-            File imageFile = new File(src);
+-            is = new FileInputStream(src);
+-            BitmapFactory.Options bmOptions = new BitmapFactory.Options();
+-
+-            bmOptions.inJustDecodeBounds = false;
+-            bmOptions.inSampleSize = Math.min(originalW / targetW, originalH / targetH);
+-
+-            Bitmap b = BitmapFactory.decodeStream(is, new Rect(-1, -1, -1, -1), bmOptions);
+-
+-            return b;
+-        } catch (IOException e) {
++        } catch (Exception e) {
+             e.printStackTrace();
+             return null;
+         }
+@@ -198,4 +148,39 @@
+                 piece.canMove,
+                 piece.getContext());
+     }
++
++    @RequiresApi(api = Build.VERSION_CODES.M)
++    public static boolean hasWritePermission(Activity act) {
++        act.onRequestPermissionsResult(REQUEST_WRITE_EXTERNAL_STORAGE, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, new int[]{PackageManager.PERMISSION_GRANTED});
++        if (ContextCompat.checkSelfPermission(act, Manifest.permission.WRITE_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
++            ActivityCompat.shouldShowRequestPermissionRationale(act, Manifest.permission.WRITE_EXTERNAL_STORAGE);
++            ActivityCompat.requestPermissions(act, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, REQUEST_WRITE_EXTERNAL_STORAGE);
++        } else {
++            return true;
++        }
++        return false;
++    }
++
++    @RequiresApi(api = Build.VERSION_CODES.M)
++    public static boolean hasReadPermission(Activity act) {
++        act.onRequestPermissionsResult(REQUEST_READ_EXTERNAL_STORAGE, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, new int[]{PackageManager.PERMISSION_GRANTED});
++        if (ContextCompat.checkSelfPermission(act, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
++            ActivityCompat.shouldShowRequestPermissionRationale(act, Manifest.permission.READ_EXTERNAL_STORAGE);
++            ActivityCompat.requestPermissions(act, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_EXTERNAL_STORAGE);
++        } else {
++            return true;
++        }
++        return false;
++    }
++
++    public static boolean hasCameraPermission(GalleryActivity act) {
++        act.onRequestPermissionsResult(REQUEST_CAPTURE_IMAGE, new String[]{Manifest.permission.CAMERA}, new int[]{PackageManager.PERMISSION_GRANTED});
++        if (ContextCompat.checkSelfPermission(act, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
++            ActivityCompat.shouldShowRequestPermissionRationale(act, Manifest.permission.CAMERA);
++            ActivityCompat.requestPermissions(act, new String[]{Manifest.permission.CAMERA}, REQUEST_READ_EXTERNAL_STORAGE);
++        } else {
++            return true;
++        }
++        return false;
++    }
+ }
+Index: app/src/main/java/com/example/puzzlegame/model/interfaces/DAO/GalleryDAO.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/model/interfaces/DAO/GalleryDAO.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/model/interfaces/DAO/GalleryDAO.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -14,7 +14,7 @@
+     @Query("SELECT * FROM Images")
+     List<Image> getAllImages();
+ 
+-    @Query("SELECT * FROM Images WHERE imgName = :name")
++    @Query("SELECT * FROM Images WHERE imgName = :name limit 1")
+     Image findByName(String name);
+ 
+     @Insert
+Index: app/src/main/java/com/example/puzzlegame/repository/GalleryRepository.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/repository/GalleryRepository.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/repository/GalleryRepository.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -1,38 +1,43 @@
+ package com.example.puzzlegame.repository;
+ 
+-import android.app.Application;
+-import android.content.Context;
++import android.app.Activity;
+ import android.content.res.AssetManager;
+ import android.graphics.Bitmap;
++import android.net.Uri;
++import android.os.Build;
++import android.os.Environment;
++import android.util.Log;
++
++import androidx.annotation.RequiresApi;
+ 
+ import com.example.puzzlegame.basededatos.AppDataBase;
+ import com.example.puzzlegame.common.Utils;
+-import com.example.puzzlegame.model.Gallery;
+ import com.example.puzzlegame.model.Image;
+ 
+ import java.io.IOException;
++import java.io.InputStream;
+ import java.util.ArrayList;
+ import java.util.List;
+ 
++import static android.content.ContentValues.TAG;
++
+ public class GalleryRepository {
+ 
+     private static GalleryRepository galleryRepository;
+-    private Gallery gallery;
+     private List<Image> imageList;
+-    private Context appContext;
+     private AssetManager assetManager;
+     private Bitmap currentBGBitmap;
+     private Image currentImage;
+-    private AppDataBase db;
++    private final AppDataBase db;
+ 
+-    private GalleryRepository(Application application) {
++    private GalleryRepository(Activity act) {
+         imageList = new ArrayList<>();
+-        db = Utils.getDB(application);
++        db = Utils.getDB(act.getApplication());
+     }
+ 
+-    public static GalleryRepository initGalleryRepository(Application app) {
++    public static GalleryRepository initGalleryRepository(Activity act) {
+         if (galleryRepository == null) {
+-            galleryRepository = new GalleryRepository(app);
++            galleryRepository = new GalleryRepository(act);
+         }
+         return galleryRepository;
+     }
+@@ -48,53 +53,97 @@
+     /**
+      * Check in assets img folder if there is a new image file. If found an image not stored, update database
+      * and store the whole images in cache.
+-     *
+-     * @param am
+-     * @param refreshing
+-     * @return
+      */
+-    public boolean updateImageList(AssetManager am, final boolean refreshing) {
++    public void updateImageList(final Activity act, final boolean refreshing) {
+         // if is not the first time checking img folder vs db and not refreshing data -> exit
+         if (assetManager != null && !refreshing) {
+-            return false;
++            return;
+         }
+ 
+-        final List<Image> temp = new ArrayList<>();
+-        assetManager = am;
+-
+-        new Thread(new Runnable() {
+-            @Override
+-            public void run() {
+-                int thumbW = 120;
+-                int thumbH = 120;
++        assetManager = act.getAssets();
++        try {
++            Thread t = new Thread(new Runnable() {
++                @RequiresApi(api = Build.VERSION_CODES.M)
++                @Override
++                public void run() {
+ 
+-                try {
+-                    String[] list = assetManager.list("img");
++                    String[] list = new String[0];
++                    try {
++                        list = assetManager.list("img");
++                    } catch (IOException e) {
++                        e.printStackTrace();
++                    }
+                     for (String src : list) {
+                         Image img = db.galleryDAO().findByName(src);
+                         if (img == null) {
+-                            img = Utils.createImage(assetManager, src);
+-                            db.galleryDAO().insertImages(img);
+-                        } else {
+-                            if (img.getBitmap() == null) {
+-                                img.setBitmap(Utils.getScaledBitmap(assetManager, img.getImgName(), img.getPhotoWidth(), thumbW, img.getPhotoHeight(), thumbH));
+-                                if (refreshing) {
+-                                    temp.add(img);
+-                                } else {
+-                                    imageList.add(img);
+-                                }
+-                            }
+-                        }
+-                    }
+-                    if (temp.size() > 0) {
+-                        imageList = temp;
+-                    }
+-                } catch (IOException e) {
+-                    e.printStackTrace();
++                            try {
++                                InputStream is = assetManager.open("img/" + src);
++                                img = Utils.createImage(is, Uri.parse(src));
++                                db.galleryDAO().insertImages(img);
++                            } catch (IOException e) {
++                                e.printStackTrace();
++                            }
++
++                        }
++                    }
++                    RefreshAssetImageList(act);
++                }
++            });
++            t.start();
++            t.join();
++        } catch (Exception e) {
++            e.printStackTrace();
++        }
++    }
++
++    @RequiresApi(api = Build.VERSION_CODES.M)
++    private void RefreshAssetImageList(final Activity act) {
++        try {
++            int thumbW = 120;
++            int thumbH = 120;
++            Thread t = new Thread(new Runnable() {
++                @Override
++                public void run() {
++                    imageList = db.galleryDAO().getAllImages();
++                }
++            });
++            t.start();
++            t.join();
++
++            if (imageList == null) {
++                return;
++            }
++
++            InputStream is = null;
++            for (Image im : imageList) {
++                if (im.getBitmap() == null) {
++
++                    try {
++                        String state = Environment.getExternalStorageState();
++                        if (Environment.MEDIA_MOUNTED.equals(state)) {
++                            if (Utils.hasReadPermission(act)) {
++                                is = act.getContentResolver().openInputStream(Uri.parse(im.getImgName()));
++                            }
++                        }
++                    } catch (Exception ex) {
++                        try {
++                            is = act.getAssets().open("img/" + im.getImgName());
++                        } catch (Exception e) {
++                            e.printStackTrace();
++                        }
++                    }
++                } else {
++                    try {
++                        is = act.getAssets().open("img/" + im.getImgName());
++                    } catch (Exception e) {
++                        Log.d(TAG, "RefreshAssetImageList: " + e.getMessage());
++                    }
+                 }
++                im.setBitmap(Utils.getScaledBitmap(is, im.getPhotoWidth(), thumbW, im.getPhotoHeight(), thumbH));
+             }
+-        }).start();
+-        return true;
++        } catch (Exception ex) {
++            ex.printStackTrace();
++        }
+     }
+ 
+     /**
+@@ -102,16 +151,24 @@
+      *
+      * @param img clicked image from galleryactivity
+      */
+-    public void setCurrentBGBitmap(Image img) {
++    public void setCurrentBGBitmap(Activity act, Image img) {
+         currentImage = img;
+         int gameW = 683;
+         int gameH = 1024;
+-
+-        String src = img.getImgName();
+         int photoW = img.getPhotoWidth();
+         int photoH = img.getPhotoHeight();
+ 
+-        currentBGBitmap = Utils.getScaledBitmap(assetManager, src, photoW, gameW, photoH, gameH);
++        InputStream is = null;
++        try {
++            is = act.getContentResolver().openInputStream(Uri.parse(img.getImgName()));
++        } catch (Exception ex) {
++            try {
++                is = act.getAssets().open("img/" + img.getImgName());
++            } catch (Exception e) {
++                e.printStackTrace();
++            }
++        }
++        currentBGBitmap = Utils.getScaledBitmap(is, photoW, gameW, photoH, gameH);
+     }
+ 
+     public Bitmap getCurrentBGBitmap() {
+@@ -122,8 +179,44 @@
+         return currentImage;
+     }
+ 
+-    public void addImage(Image img) {
+-        imageList.add(img);
+-        gallery.addImage(img);
++    public Image addImageToList(final Activity act, final Uri uri) {
++        final Image[] _img = new Image[1];
++        int thumbW = 120;
++        int thumbH = 120;
++        try {
++            Thread t = new Thread(new Runnable() {
++                @Override
++                public void run() {
++                    _img[0] = db.galleryDAO().findByName(uri.toString());
++                }
++            });
++            t.start();
++            t.join();
++        } catch (Exception ex) {
++            ex.printStackTrace();
++        }
++        try {
++            InputStream is = act.getContentResolver().openInputStream(uri);
++            if (_img[0] == null) {
++                _img[0] = Utils.createImage(is, uri);
++                Thread t1 = new Thread(new Runnable() {
++                    @Override
++                    public void run() {
++                        db.galleryDAO().insertImages(_img[0]);
++                    }
++                });
++                t1.start();
++                t1.join();
++            }
++            Image tempImg = _img[0];
++            if (tempImg.getBitmap() == null) {
++                tempImg.setBitmap(Utils.getScaledBitmap(is, tempImg.getPhotoWidth(), thumbW, tempImg.getPhotoHeight(), thumbH));
++                imageList.add(tempImg);
++                return tempImg;
++            }
++        } catch (Exception ex) {
++            ex.printStackTrace();
++        }
++        return null;
+     }
+ }
+\ No newline at end of file
+Index: app/src/main/java/com/example/puzzlegame/repository/GameAppRepository.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/repository/GameAppRepository.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/repository/GameAppRepository.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -1,7 +1,6 @@
+ package com.example.puzzlegame.repository;
+ 
+-import android.app.Application;
+-import android.content.res.AssetManager;
++import android.app.Activity;
+ 
+ import com.example.puzzlegame.basededatos.AppDataBase;
+ import com.example.puzzlegame.common.Utils;
+@@ -26,11 +25,11 @@
+     private List<Level> levels;
+     private LocalHallOfFame hof;
+ 
+-    private GameAppRepository(final Application application) {
+-        db = Utils.getDB(application);
++    private GameAppRepository(Activity act) {
++        db = Utils.getDB(act.getApplication());
+         initGameAppData();
+         updateLevels();
+-        updateGallery(application);
++        updateGallery(act);
+     }
+ 
+     private void initGameAppData() {
+@@ -44,15 +43,14 @@
+         }).start();
+     }
+ 
+-    private void updateGallery(Application app) {
+-        AssetManager am = app.getAssets();
++    private void updateGallery(Activity act) {
+         GalleryRepository galleryRepository = GalleryRepository.getGalleryRepository();
+-        galleryRepository.updateImageList(am, false);
++        galleryRepository.updateImageList(act, false);
+     }
+ 
+-    public static GameAppRepository initGameAppRepository(Application application) {
++    public static GameAppRepository initGameAppRepository(Activity act) {
+         if (gameAppRepository == null) {
+-            gameAppRepository = new GameAppRepository(application);
++            gameAppRepository = new GameAppRepository(act);
+         }
+         return gameAppRepository;
+     }
+@@ -75,7 +73,10 @@
+                         setCurrentUser(currentUser);
+                     }
+                         Level lvl = db.levelDAO().getLevel(currentUser.userLvlId);
+-                        currentUser.setUserLvl(lvl);
++                        if (lvl == null) {
++                            lvl = new Level(1, "Easy", 3, 4);
++                        }
++                    currentUser.setUserLvl(lvl);
+                 }
+             });
+             t.start();
+Index: app/src/main/java/com/example/puzzlegame/repository/GameSessionRepository.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/repository/GameSessionRepository.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/repository/GameSessionRepository.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -7,18 +7,17 @@
+ import com.example.puzzlegame.model.GameSession;
+ import com.example.puzzlegame.model.Level;
+ import com.example.puzzlegame.model.Piece;
+-import com.example.puzzlegame.model.PieceData;
+ import com.example.puzzlegame.model.User;
+ 
+ import java.util.List;
+ 
+ public class GameSessionRepository {
+     private static GameSessionRepository gameSessionRepository;
+-    private GameAppRepository gameAppRepository;
+-    private GalleryRepository galleryRepository;
++    private final GameAppRepository gameAppRepository;
++    private final GalleryRepository galleryRepository;
+     private GameSession gameSession;
+     private AppDataBase db;
+-    private User user;
++    private final User user;
+ 
+     private GameSessionRepository() {
+         gameAppRepository = GameAppRepository.getGameAppRepository();
+@@ -63,8 +62,7 @@
+         new Thread(new Runnable() {
+             @Override
+             public void run() {
+-                List<PieceData> dataPieces = Utils.piecesToData(gameSession.getPieces());
+-                gameSession.pieceDataList = dataPieces;
++                gameSession.pieceDataList = Utils.piecesToData(gameSession.getPieces());
+                 gameSession.setEndTime(playedTime);
+                 long gsId = db.gameSessionDAO().insertGameSession(gameSession);
+                 gameSession.setId(gsId);
+Index: app/src/main/java/com/example/puzzlegame/repository/HallOfFameRepository.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/repository/HallOfFameRepository.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/repository/HallOfFameRepository.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -1,6 +1,6 @@
+ package com.example.puzzlegame.repository;
+ 
+-import android.app.Application;
++import android.app.Activity;
+ import android.util.Log;
+ 
+ import com.example.puzzlegame.basededatos.AppDataBase;
+@@ -22,8 +22,8 @@
+         return hallOfFameRepository;
+     }
+ 
+-    public void initHallOfFameRepository(Application application){
+-        db = Utils.getDB(application);
++    public void initHallOfFameRepository(Activity act){
++        db = Utils.getDB(act.getApplication());
+         scores = new ArrayList<>();
+         try{
+             Thread t = new Thread(new Runnable(){
+@@ -53,7 +53,6 @@
+         } catch (Exception e){
+             Log.d("HallOfFame", "saveScore: failed" + e);
+         }
+-
+     }
+ 
+     public List<Score> getScores(){
+Index: app/src/main/java/com/example/puzzlegame/repository/MusicPlayListRepository.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/repository/MusicPlayListRepository.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/repository/MusicPlayListRepository.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -1,6 +1,6 @@
+ package com.example.puzzlegame.repository;
+ 
+-import android.app.Application;
++import android.app.Activity;
+ import android.net.Uri;
+ import android.util.Log;
+ 
+@@ -30,8 +30,8 @@
+         return Instance;
+     }
+ 
+-    public void initMusicPlayListRepository(Application app) {
+-        db = Utils.getDB(app);
++    public void initMusicPlayListRepository(Activity act) {
++        db = Utils.getDB(act.getApplication());
+         playList = new ArrayList<>();
+         try {
+             Thread t = new Thread(new Runnable() {
+Index: app/src/main/java/com/example/puzzlegame/ui/common/BaseActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/common/BaseActivity.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/ui/common/BaseActivity.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -41,7 +41,7 @@
+ 
+     protected void begin() {
+         gameAppViewModel = new ViewModelProvider(this).get(GameAppViewModel.class);
+-        gameAppViewModel.begin(getApplication());
++        gameAppViewModel.begin(this);
+         settingsViewModel = new ViewModelProvider(this).get(SettingsViewModel.class);
+         beginListeners();
+     }
+@@ -91,7 +91,7 @@
+             releaseMusicPlayer();
+         }
+ 
+-        mediaPlayer = MediaPlayer.create(this, R.raw.puzzledroid_theme);
++        mediaPlayer = MediaPlayer.create(this, R.raw.main_theme);
+         if (mediaPlayer == null) {
+             Toast.makeText(this, getString(R.string.No_AudioFile), Toast.LENGTH_SHORT).show();
+             return;
+Index: app/src/main/java/com/example/puzzlegame/ui/common/GameAppViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/common/GameAppViewModel.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/ui/common/GameAppViewModel.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -1,6 +1,6 @@
+ package com.example.puzzlegame.ui.common;
+ 
+-import android.app.Application;
++import android.app.Activity;
+ 
+ import androidx.lifecycle.ViewModel;
+ 
+@@ -13,11 +13,11 @@
+     GalleryRepository galleryRepository;
+     HallOfFameRepository hallOfFameRepository;
+ 
+-    public void begin(Application application) {
+-        galleryRepository = GalleryRepository.initGalleryRepository(application);
+-        gameAppRepository = GameAppRepository.initGameAppRepository(application);
++    public void begin(Activity act) {
++        galleryRepository = GalleryRepository.initGalleryRepository(act);
++        gameAppRepository = GameAppRepository.initGameAppRepository(act);
+         hallOfFameRepository = HallOfFameRepository.getInstance();
+         gameAppRepository.getCurrentUser(); // pendiente de actualización con la implementación del login
+-        hallOfFameRepository.initHallOfFameRepository(application);
++        hallOfFameRepository.initHallOfFameRepository(act);
+     }
+ }
+Index: app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryActivity.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryActivity.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -1,40 +1,51 @@
+ package com.example.puzzlegame.ui.gallery;
+ 
+-import android.Manifest;
++import android.annotation.SuppressLint;
++import android.content.ActivityNotFoundException;
+ import android.content.Intent;
+ import android.content.pm.PackageManager;
+-import android.content.res.AssetManager;
++import android.graphics.Bitmap;
+ import android.net.Uri;
+ import android.os.Build;
+ import android.os.Bundle;
++import android.os.Environment;
++import android.provider.MediaStore;
++import android.util.Log;
+ import android.view.View;
+ import android.widget.Toast;
+ 
+ import androidx.annotation.Nullable;
+ import androidx.annotation.RequiresApi;
+-import androidx.core.app.ActivityCompat;
+-import androidx.core.content.ContextCompat;
++import androidx.core.content.FileProvider;
+ import androidx.lifecycle.Observer;
+ import androidx.lifecycle.ViewModelProvider;
+ import androidx.recyclerview.widget.GridLayoutManager;
+ import androidx.recyclerview.widget.LinearLayoutManager;
+ import androidx.recyclerview.widget.RecyclerView;
+ 
++import com.example.puzzlegame.BuildConfig;
+ import com.example.puzzlegame.R;
+ import com.example.puzzlegame.common.CommonBarMethods;
++import com.example.puzzlegame.common.Utils;
+ import com.example.puzzlegame.model.Image;
+ import com.example.puzzlegame.model.Level;
+ import com.example.puzzlegame.ui.common.BaseActivity;
+ import com.example.puzzlegame.ui.game.PuzzleGameActivity;
+ import com.google.android.material.floatingactionbutton.FloatingActionButton;
+ 
++import java.io.File;
++import java.io.IOException;
++import java.text.SimpleDateFormat;
+ import java.util.ArrayList;
++import java.util.Date;
+ import java.util.List;
++import java.util.Objects;
+ 
+ public class GalleryActivity extends BaseActivity implements GalleryAdapter.OnImageListener {
+ 
+-    static final int REQUEST_READ_EXTERNAL_STORAGE = 5;
+-    static final int REQUEST_IMAGE_GALLERY = 2;
++    static final int REQUEST_IMAGE_GALLERY = 1;
++    private static final int REQUEST_IMAGE_CAPTURE = 2;
++    private static final String TAG = "galleryAct";
+ 
+     private GalleryViewModel galleryViewModel;
+     private Level levelSelected;
+@@ -42,7 +53,8 @@
+     private RecyclerView galleryGridView;
+     private RecyclerView.Adapter<GalleryAdapter.MyViewHolder> adapter;
+     private FloatingActionButton addFromGalleryButton;
+-    AssetManager assetManager;
++    private FloatingActionButton addFromCameraButton;
++    private Uri currentPhotoUri;
+ 
+     @Override
+     protected void onCreate(@Nullable Bundle savedInstanceState) {
+@@ -57,12 +69,8 @@
+     }
+ 
+     private void init() {
+-        assetManager = getAssets();
+-
+         galleryViewModel = new ViewModelProvider(this).get(GalleryViewModel.class);
+-
+         galleryImages = galleryViewModel.getImageList().getValue();
+-
+         Intent intent = getIntent();
+         levelSelected = (Level) intent.getSerializableExtra("levelSelected");
+     }
+@@ -73,16 +81,17 @@
+ 
+         LinearLayoutManager layoutManager = new GridLayoutManager(this, 3);
+         galleryGridView.setLayoutManager(layoutManager);
+-        addFromGalleryButton = findViewById(R.id.addImageButton);
++        addFromGalleryButton = findViewById(R.id.addImageFromLib);
++        addFromCameraButton = findViewById(R.id.addImageFromCam);
+         setListeners();
+-        galleryViewModel.updateGallery(assetManager);
++        galleryViewModel.updateGallery(this);
+     }
+ 
+     private void setListeners() {
+         addFromGalleryButton.setOnClickListener(new View.OnClickListener() {
+             @Override
+             public void onClick(View v) {
+-                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
++                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
+                     getImageFromGallery();
+                 } else {
+                     Toast.makeText(getApplicationContext(), getString(R.string.not_available), Toast.LENGTH_LONG).show();
+@@ -90,20 +99,79 @@
+             }
+         });
+ 
+-        //LiveData
++        addFromCameraButton.setOnClickListener(new View.OnClickListener() {
++            @Override
++            public void onClick(View v) {
++                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
++                    getImageFromCamera();
++                } else {
++                    Toast.makeText(getApplicationContext(), getString(R.string.not_available), Toast.LENGTH_LONG).show();
++                }
++            }
++        });
++
+         final Observer<List<Image>> galleryImagesObserver = new Observer<List<Image>>() {
+             @Override
+             public void onChanged(List<Image> images) {
+                 if (galleryImages == null) {
+                     galleryImages = images;
+                 }
+-                    inflateGallery();
+-                    adapter.notifyDataSetChanged();
+-                }
++                inflateGallery();
++                adapter.notifyDataSetChanged();
++            }
+         };
+         galleryViewModel.getImageList().observe(this, galleryImagesObserver);
+     }
+ 
++    @RequiresApi(api = Build.VERSION_CODES.M)
++    private void getImageFromCamera() {
++        if (!hasDeviceCamera()) {
++            return;
++        }
++        if (Utils.hasCameraPermission(this)) {
++            Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
++            try {
++                File photoFile = null;
++                photoFile = createImageFile();
++
++                if (photoFile != null) {
++                    currentPhotoUri = FileProvider.getUriForFile(Objects.requireNonNull(getApplicationContext()),
++                            BuildConfig.APPLICATION_ID + ".provider", photoFile);
++                    intent.putExtra(MediaStore.EXTRA_OUTPUT, currentPhotoUri);
++                    startActivityForResult(intent, REQUEST_IMAGE_CAPTURE);
++                }
++            } catch (ActivityNotFoundException e) {
++                Log.d(TAG, "getImageFromCamera: Another fucking problem");
++            }
++        }
++    }
++
++    private boolean hasDeviceCamera() {
++        return (getApplicationContext().getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA));
++    }
++
++    @RequiresApi(api = Build.VERSION_CODES.M)
++    private File createImageFile() {
++        if (Utils.hasWritePermission(this)) {
++            @SuppressLint("SimpleDateFormat") String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
++            String imageFileName = "JPEG_" + timeStamp + "_";
++            File storageDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
++            File imageFile = null;
++            try {
++                imageFile = File.createTempFile(
++                        imageFileName,
++                        ".jpg",
++                        storageDir
++                );
++            } catch (IOException e) {
++                e.printStackTrace();
++            }
++            return imageFile;
++        }
++
++        return null;
++    }
++
+     private void inflateGallery() {
+         adapter = new GalleryAdapter(this, galleryImages, this);
+         galleryGridView.setAdapter(adapter);
+@@ -111,31 +179,48 @@
+ 
+     @Override
+     public void onImageClick(int position) {
+-        Intent intent = new Intent(this, PuzzleGameActivity.class);
+-        galleryViewModel.setImageToBackground(galleryImages.get(position));
+-        intent.putExtra("gameLevel", levelSelected);
+-        startActivity(intent);
++        playGame(galleryImages.get(position));
+     }
+ 
+-    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN)
++    @RequiresApi(api = Build.VERSION_CODES.M)
+     public void getImageFromGallery() {
+-        onRequestPermissionsResult(REQUEST_READ_EXTERNAL_STORAGE, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, new int[]{PackageManager.PERMISSION_GRANTED});
+-        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+-            ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_EXTERNAL_STORAGE);
+-            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_EXTERNAL_STORAGE);
+-        } else {
+-            Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
++        if (Utils.hasWritePermission(this) && Utils.hasReadPermission(this)) {
++            Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
++            intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
+             intent.setType("image/*");
+             startActivityForResult(intent, REQUEST_IMAGE_GALLERY);
+         }
+     }
+ 
++    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
+     @Override
+     protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
+         super.onActivityResult(requestCode, resultCode, data);
+         if (requestCode == REQUEST_IMAGE_GALLERY && resultCode == RESULT_OK) {
+             Uri uri = data.getData();
+-            galleryViewModel.addImage(uri);
++            getContentResolver().takePersistableUriPermission(uri, Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
++            Image img = galleryViewModel.addImage(this, uri);
++            playGame(img);
++        }
++
++        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {
++            try{
++                Image img = galleryViewModel.addImage(this, currentPhotoUri);
++                if (img.getBitmap() == null) {
++                    Bitmap bitmap = MediaStore.Images.Media.getBitmap(getContentResolver(), currentPhotoUri);
++                    img.setBitmap(bitmap);
++                }
++                playGame(img);
++            } catch (Exception ex) {
++                ex.printStackTrace();
++            }
+         }
+     }
++
++    private void playGame(Image img) {
++        Intent intent = new Intent(this, PuzzleGameActivity.class);
++        galleryViewModel.setImageToBackground(this, img);
++        intent.putExtra("gameLevel", levelSelected);
++        startActivity(intent);
++    }
+ }
+\ No newline at end of file
+Index: app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryViewModel.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryViewModel.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -1,13 +1,12 @@
+ package com.example.puzzlegame.ui.gallery;
+ 
+-import android.content.res.AssetManager;
++import android.app.Activity;
+ import android.net.Uri;
+ 
+ import androidx.lifecycle.LiveData;
+ import androidx.lifecycle.MutableLiveData;
+ import androidx.lifecycle.ViewModel;
+ 
+-import com.example.puzzlegame.common.Utils;
+ import com.example.puzzlegame.model.Image;
+ import com.example.puzzlegame.repository.GalleryRepository;
+ 
+@@ -23,23 +22,23 @@
+         galleryImages = new MutableLiveData<>();
+     }
+ 
+-    public void updateGallery(AssetManager assetManager) {
+-        galleryRepository.updateImageList(assetManager, true);
++    public void updateGallery(Activity act) {
++        galleryRepository.updateImageList(act, true);
+         updateGallery();
+     }
+ 
+     private void updateGallery() {
+-        galleryImages.postValue(galleryRepository.getImageList());
++        galleryImages.setValue(galleryRepository.getImageList());
+     }
+ 
+-    public void addImage(Uri imageUri){
+-        Image img = Utils.createImage(imageUri.toString());
+-        galleryRepository.addImage(img);
++    public Image addImage(Activity act, Uri uri){
++        Image img = galleryRepository.addImageToList(act, uri);
+         updateGallery();
++        return img;
+     }
+ 
+-    public void setImageToBackground(Image image) {
+-        galleryRepository.setCurrentBGBitmap(image);
++    public void setImageToBackground(Activity act, Image image) {
++        galleryRepository.setCurrentBGBitmap(act, image);
+     }
+ 
+     public LiveData<List<Image>> getImageList() {
+Index: app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameActivity.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameActivity.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -42,7 +42,7 @@
+ 
+     private void init() {
+         hallOfFameViewModel = new ViewModelProvider(this).get(HallOfFameViewModel.class);
+-        hallOfFameViewModel.init(getApplication());
++        hallOfFameViewModel.init(this);
+     }
+ 
+     private void setViews() {
+Index: app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameViewModel.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameViewModel.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -1,6 +1,6 @@
+ package com.example.puzzlegame.ui.halloffame;
+ 
+-import android.app.Application;
++import android.app.Activity;
+ 
+ import androidx.lifecycle.LiveData;
+ import androidx.lifecycle.MutableLiveData;
+@@ -18,9 +18,9 @@
+ 
+     public HallOfFameViewModel() {}
+ 
+-    public void init(Application application) {
++    public void init(Activity act) {
+         hallOfFameRepository = new HallOfFameRepository();
+-        hallOfFameRepository.initHallOfFameRepository(application);
++        hallOfFameRepository.initHallOfFameRepository(act);
+     }
+ 
+     public void getScores(){
+Index: app/src/main/java/com/example/puzzlegame/ui/settings/SettingsFragment.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/settings/SettingsFragment.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/ui/settings/SettingsFragment.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -5,6 +5,7 @@
+ import android.content.Intent;
+ import android.content.pm.PackageManager;
+ import android.net.Uri;
++import android.os.Build;
+ import android.os.Bundle;
+ import android.view.LayoutInflater;
+ import android.view.View;
+@@ -16,6 +17,7 @@
+ 
+ import androidx.annotation.NonNull;
+ import androidx.annotation.Nullable;
++import androidx.annotation.RequiresApi;
+ import androidx.appcompat.widget.SwitchCompat;
+ import androidx.core.app.ActivityCompat;
+ import androidx.core.content.ContextCompat;
+@@ -25,6 +27,7 @@
+ import androidx.recyclerview.widget.RecyclerView;
+ 
+ import com.example.puzzlegame.R;
++import com.example.puzzlegame.common.Utils;
+ import com.example.puzzlegame.model.MusicSettings;
+ import com.example.puzzlegame.model.Song;
+ import com.example.puzzlegame.ui.common.BaseActivity;
+@@ -155,23 +158,22 @@
+         });
+     }
+ 
++    @RequiresApi(api = Build.VERSION_CODES.M)
+     private void getSong() {
+-        onRequestPermissionsResult(REQUEST_READ_EXTERNAL_STORAGE, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, new int[]{PackageManager.PERMISSION_GRANTED});
+-        if (ContextCompat.checkSelfPermission(baseActivity, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
+-            ActivityCompat.shouldShowRequestPermissionRationale(baseActivity, Manifest.permission.READ_EXTERNAL_STORAGE);
+-            ActivityCompat.requestPermissions(baseActivity, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_EXTERNAL_STORAGE);
+-        }
+-
+-        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
+-        intent.setType("audio/*");
+-        startActivityForResult(intent, REQUEST_READ_EXTERNAL_STORAGE);
++        if (Utils.hasReadPermission(baseActivity)) {
++            Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
++            intent.setType("audio/*");
++            startActivityForResult(intent, REQUEST_READ_EXTERNAL_STORAGE);
++        }
+     }
+ 
++    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
+     @Override
+     public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
+         if (requestCode == REQUEST_READ_EXTERNAL_STORAGE && resultCode == RESULT_OK) {
+             Uri uri = data.getData();
+             Song song = new Song(uri, data.getStringExtra("Name"));
++            baseActivity.getContentResolver().takePersistableUriPermission(uri, Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
+             settingsViewModel.setCurrentSong(song);
+         }
+     }
+Index: app/src/main/java/com/example/puzzlegame/ui/settings/SettingsViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/settings/SettingsViewModel.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/ui/settings/SettingsViewModel.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -1,6 +1,6 @@
+ package com.example.puzzlegame.ui.settings;
+ 
+-import android.app.Application;
++import android.app.Activity;
+ 
+ import androidx.lifecycle.LiveData;
+ import androidx.lifecycle.MutableLiveData;
+@@ -28,8 +28,8 @@
+         _repo = MusicPlayListRepository.getInstance();
+     }
+ 
+-    public void initRepository(Application app) {
+-        _repo.initMusicPlayListRepository(app);
++    public void initRepository(Activity act) {
++        _repo.initMusicPlayListRepository(act);
+         refreshData();
+     }
+     private void refreshData() {
+Index: app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenActivity.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenActivity.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -81,7 +81,7 @@
+ 
+     private void init() {
+         winScreenViewModel = new ViewModelProvider(this).get(WinScreenViewModel.class);
+-        winScreenViewModel.initRepo(getApplication());
++        winScreenViewModel.initRepo(this);
+     }
+ 
+     private void setViews() {
+Index: app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenViewModel.java	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenViewModel.java	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -1,6 +1,6 @@
+ package com.example.puzzlegame.ui.winscreen;
+ 
+-import android.app.Application;
++import android.app.Activity;
+ 
+ import androidx.lifecycle.ViewModel;
+ 
+@@ -38,8 +38,8 @@
+         hallOfFameRepository.saveScore(score);
+     }
+ 
+-    public void initRepo(Application application) {
+-        hallOfFameRepository.initHallOfFameRepository(application);
++    public void initRepo(Activity act) {
++        hallOfFameRepository.initHallOfFameRepository(act);
+     }
+ 
+     public Boolean isRecord(Score score) {
+Index: app/src/main/res/drawable/ic_baseline_photo_camera_24.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/drawable/ic_baseline_photo_camera_24.xml	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
++++ app/src/main/res/drawable/ic_baseline_photo_camera_24.xml	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -0,0 +1,6 @@
++<vector android:height="24dp" android:tint="#FFFFFF"
++    android:viewportHeight="24" android:viewportWidth="24"
++    android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
++    <path android:fillColor="@android:color/white" android:pathData="M12,12m-3.2,0a3.2,3.2 0,1 1,6.4 0a3.2,3.2 0,1 1,-6.4 0"/>
++    <path android:fillColor="@android:color/white" android:pathData="M9,2L7.17,4L4,4c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2L22,6c0,-1.1 -0.9,-2 -2,-2h-3.17L15,2L9,2zM12,17c-2.76,0 -5,-2.24 -5,-5s2.24,-5 5,-5 5,2.24 5,5 -2.24,5 -5,5z"/>
++</vector>
+Index: app/src/main/res/drawable/ic_baseline_photo_library_24.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/drawable/ic_baseline_photo_library_24.xml	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
++++ app/src/main/res/drawable/ic_baseline_photo_library_24.xml	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -0,0 +1,5 @@
++<vector android:height="24dp" android:tint="#FFFFFF"
++    android:viewportHeight="24" android:viewportWidth="24"
++    android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
++    <path android:fillColor="@android:color/white" android:pathData="M22,16L22,4c0,-1.1 -0.9,-2 -2,-2L8,2c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2zM11,12l2.03,2.71L16,11l4,5L8,16l3,-4zM2,6v14c0,1.1 0.9,2 2,2h14v-2L4,20L4,6L2,6z"/>
++</vector>
+Index: app/src/main/res/layout-v21/activity_gallery.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/layout-v21/activity_gallery.xml	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/res/layout-v21/activity_gallery.xml	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+@@ -25,15 +25,27 @@
+         app:layout_constraintTop_toBottomOf="@+id/include" />
+ 
+     <com.google.android.material.floatingactionbutton.FloatingActionButton
+-        android:id="@+id/addImageButton"
++        android:id="@+id/addImageFromLib"
+         android:layout_width="wrap_content"
+         android:layout_height="wrap_content"
+         android:layout_marginBottom="16dp"
+         android:layout_marginEnd="16dp"
+         android:layout_marginRight="16dp"
+-        android:src="@drawable/ic_baseline_add_24"
++        android:src="@drawable/ic_baseline_photo_library_24"
+         android:backgroundTint="@color/colorPrimaryDark"
+         app:layout_constraintBottom_toBottomOf="parent"
+         app:layout_constraintEnd_toEndOf="parent"
+         android:contentDescription="@string/gallery_button" />
++
++    <com.google.android.material.floatingactionbutton.FloatingActionButton
++        android:id="@+id/addImageFromCam"
++        android:layout_width="wrap_content"
++        android:layout_height="wrap_content"
++        android:layout_marginEnd="92dp"
++        android:layout_marginBottom="16dp"
++        android:backgroundTint="@color/colorPrimaryDark"
++        android:contentDescription="@string/gallery_button"
++        android:src="@drawable/ic_baseline_photo_camera_24"
++        app:layout_constraintBottom_toBottomOf="parent"
++        app:layout_constraintEnd_toEndOf="parent" />
+ </androidx.constraintlayout.widget.ConstraintLayout>
+\ No newline at end of file
+Index: app/src/main/res/drawable/ic_menu_camera.xml
+===================================================================
+--- app/src/main/res/drawable/ic_menu_camera.xml	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/res/drawable/ic_menu_camera.xml	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
+@@ -1,12 +0,0 @@
+-<vector xmlns:android="http://schemas.android.com/apk/res/android"
+-    android:width="24dp"
+-    android:height="24dp"
+-    android:viewportWidth="24.0"
+-    android:viewportHeight="24.0">
+-    <path
+-        android:fillColor="#FF000000"
+-        android:pathData="M12,12m-3.2,0a3.2,3.2 0,1 1,6.4 0a3.2,3.2 0,1 1,-6.4 0" />
+-    <path
+-        android:fillColor="#FF000000"
+-        android:pathData="M9,2L7.17,4H4c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h16c1.1,0 2,-0.9 2,-2V6c0,-1.1 -0.9,-2 -2,-2h-3.17L15,2H9zm3,15c-2.76,0 -5,-2.24 -5,-5s2.24,-5 5,-5 5,2.24 5,5 -2.24,5 -5,5z" />
+-</vector>
+Index: app/src/main/res/drawable/ic_menu_gallery.xml
+===================================================================
+--- app/src/main/res/drawable/ic_menu_gallery.xml	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/res/drawable/ic_menu_gallery.xml	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
+@@ -1,9 +0,0 @@
+-<vector xmlns:android="http://schemas.android.com/apk/res/android"
+-    android:width="24dp"
+-    android:height="24dp"
+-    android:viewportWidth="24.0"
+-    android:viewportHeight="24.0">
+-    <path
+-        android:fillColor="#FF000000"
+-        android:pathData="M22,16V4c0,-1.1 -0.9,-2 -2,-2H8c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2zm-11,-4l2.03,2.71L16,11l4,5H8l3,-4zM2,6v14c0,1.1 0.9,2 2,2h14v-2H4V6H2z" />
+-</vector>
+Index: app/src/main/res/drawable/ic_menu_slideshow.xml
+===================================================================
+--- app/src/main/res/drawable/ic_menu_slideshow.xml	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/res/drawable/ic_menu_slideshow.xml	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
+@@ -1,9 +0,0 @@
+-<vector xmlns:android="http://schemas.android.com/apk/res/android"
+-    android:width="24dp"
+-    android:height="24dp"
+-    android:viewportWidth="24.0"
+-    android:viewportHeight="24.0">
+-    <path
+-        android:fillColor="#FF000000"
+-        android:pathData="M4,6H2v14c0,1.1 0.9,2 2,2h14v-2H4V6zm16,-4H8c-1.1,0 -2,0.9 -2,2v12c0,1.1 0.9,2 2,2h12c1.1,0 2,-0.9 2,-2V4c0,-1.1 -0.9,-2 -2,-2zm-8,12.5v-9l6,4.5 -6,4.5z" />
+-</vector>
+Index: app/src/main/res/layout/activity_gallery.xml
+===================================================================
+--- app/src/main/res/layout/activity_gallery.xml	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
++++ app/src/main/res/layout/activity_gallery.xml	(revision 7d94954b7c91b3eacc1f34428d69a20fee64139a)
+@@ -1,38 +0,0 @@
+-<?xml version="1.0" encoding="utf-8"?>
+-<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+-    xmlns:app="http://schemas.android.com/apk/res-auto"
+-    xmlns:tools="http://schemas.android.com/tools"
+-    android:layout_width="match_parent"
+-    android:layout_height="match_parent"
+-    tools:context=".ui.gallery.GalleryActivity"
+-    android:background="@drawable/fondo_amarillo">
+-
+-    <include
+-        android:id="@+id/include"
+-        layout="@layout/app_bar_main" />
+-
+-    <androidx.recyclerview.widget.RecyclerView
+-        android:id="@+id/gridGallery"
+-        android:layout_width="match_parent"
+-        android:layout_height="match_parent"
+-        android:layout_marginVertical="60dp"
+-        android:layout_marginHorizontal="10dp"
+-        android:padding="10dp"
+-        android:scrollbars="vertical"
+-        app:layout_constraintEnd_toEndOf="parent"
+-        app:layout_constraintStart_toStartOf="parent"
+-        app:layout_constraintTop_toBottomOf="@+id/include" />
+-
+-    <com.google.android.material.floatingactionbutton.FloatingActionButton
+-        android:id="@+id/cameraButton"
+-        android:layout_width="wrap_content"
+-        android:layout_height="wrap_content"
+-        android:layout_marginBottom="16dp"
+-        android:layout_marginEnd="16dp"
+-        android:layout_marginRight="16dp"
+-        android:src="@drawable/ic_baseline_add_24"
+-        android:backgroundTint="@color/colorPrimaryDark"
+-        app:layout_constraintBottom_toBottomOf="parent"
+-        app:layout_constraintEnd_toEndOf="parent"
+-        android:contentDescription="@string/gallery_button" />
+-</androidx.constraintlayout.widget.ConstraintLayout>
+\ No newline at end of file
Index: unnamed1.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- unnamed1.patch	(date 1608978657750)
+++ unnamed1.patch	(date 1608978657750)
@@ -0,0 +1,2568 @@
+Index: app/src/main/AndroidManifest.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/AndroidManifest.xml	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/AndroidManifest.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,21 +1,26 @@
+ <?xml version="1.0" encoding="utf-8"?>
+ <manifest xmlns:android="http://schemas.android.com/apk/res/android"
+     package="com.example.puzzlegame">
+-
++    <uses-sdk android:minSdkVersion="14" />
++    <uses-permission android:name="android.permission.READ_CALENDAR" />
++    <uses-permission android:name="android.permission.WRITE_CALENDAR" />
++    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
+     <application
+         android:icon="@drawable/logo"
+         android:label="@string/app_name"
+         android:roundIcon="@drawable/racoon1"
+         android:supportsRtl="true"
+         android:theme="@style/AppTheme">
+-        <activity android:name=".Help"/>
++        <activity android:name=".Help" />
+         <activity android:name=".ui.halloffame.HallOfFameActivity" />
+         <activity android:name=".ui.winscreen.WinScreenActivity" />
+-        <activity android:name=".ui.SelectLevel.SelectLevelActivity" />
+-        <activity android:name=".ui.SelectGame.SelectGameActivity" />
++        <activity android:name=".ui.selectLevel.SelectLevelActivity" />
++        <activity android:name=".ui.selectGame.SelectGameActivity" />
+         <activity android:name=".ui.common.BaseActivity" />
+         <activity android:name=".ui.game.PuzzleGameActivity" />
+-        <activity android:name=".MainActivity" android:theme="@style/SplashScreen">
++        <activity
++            android:name=".MainActivity"
++            android:theme="@style/SplashScreen">
+             <intent-filter>
+                 <action android:name="android.intent.action.MAIN" />
+ 
+Index: app/src/main/java/com/example/puzzlegame/MainActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/MainActivity.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/MainActivity.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,47 +1,23 @@
+ package com.example.puzzlegame;
+ 
+-import android.app.NotificationChannel;
+-import android.app.NotificationManager;
+ import android.content.Intent;
+-import android.os.Build;
+ import android.os.Bundle;
+ import android.view.View;
+ import android.widget.Button;
+-import androidx.annotation.RequiresApi;
++
++import androidx.lifecycle.ViewModelProvider;
+ 
+ import com.example.puzzlegame.common.CommonBarMethods;
+-import com.example.puzzlegame.repository.GalleryRepository;
+-import com.example.puzzlegame.repository.GameAppRepository;
+-import com.example.puzzlegame.repository.HallOfFameRepository;
+-import com.example.puzzlegame.ui.SelectGame.SelectGameActivity;
+ import com.example.puzzlegame.ui.common.BaseActivity;
+ import com.example.puzzlegame.ui.halloffame.HallOfFameActivity;
++import com.example.puzzlegame.ui.selectGame.SelectGameActivity;
++import com.example.puzzlegame.ui.settings.SettingsViewModel;
+ 
+-@RequiresApi(api = Build.VERSION_CODES.O)
+ public class MainActivity extends BaseActivity {
+ 
+     Button btn1, btn2;
+     Button[] buttons;
+-    GameAppRepository gameAppRepository;
+-    GalleryRepository galleryRepository;
+-    HallOfFameRepository hallOfFameRepository;
+-    NotificationChannel canal=new NotificationChannel(getString(R.string.idcanal),getString(R.string.canalname), NotificationManager.IMPORTANCE_DEFAULT);
+-
+-    private void createNotificationChannel() {
+-        // Create the NotificationChannel, but only on API 26+ because
+-        // the NotificationChannel class is new and not in the support library
+-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+-            CharSequence name = getString(R.string.canalname);
+-            String description = getString(R.string.channel_description);
+-            int importance = NotificationManager.IMPORTANCE_DEFAULT;
+-            NotificationChannel channel = new NotificationChannel(getString(R.string.idcanal),getString(R.string.canalname), NotificationManager.IMPORTANCE_DEFAULT);
+-            channel.setDescription(description);
+-            // Register the channel with the system; you can't change the importance
+-            // or other notification behaviors after this
+-            NotificationManager notificationManager = getSystemService(NotificationManager.class);
+-            notificationManager.createNotificationChannel(channel);
+-        }
+-    }
++    SettingsViewModel settingsViewModel;
+ 
+     @Override
+     protected void onCreate(Bundle savedInstanceState) {
+@@ -50,25 +26,17 @@
+         setContentView(R.layout.activity_main);
+         CommonBarMethods.createToolbar(this);
+         CommonBarMethods.configDefaultAppBar(this);
+-
+-        init();
++        settingsViewModel = new ViewModelProvider(this).get(SettingsViewModel.class);
++        settingsViewModel.initRepository(getApplication());
++        super.begin();
+         setViews();
+         setListeners();
+-
+     }
+ 
+     /**
+      * getDataBase instance for the first time and set all levels if they are not set
+      * run on background
+      */
+-    private void init() {
+-                galleryRepository = GalleryRepository.initGalleryRepository(getApplication());
+-                gameAppRepository = GameAppRepository.initGameAppRepository(getApplication());
+-                hallOfFameRepository = HallOfFameRepository.getInstance();
+-                gameAppRepository.getCurrentUser(); // pendiente de actualización con la implementación del login
+-                hallOfFameRepository.initHallOfFameRepository(getApplication());
+-    }
+-
+     private void setViews() {
+         btn1 = findViewById(R.id.button1);
+         btn2 = findViewById(R.id.button2);
+@@ -88,6 +56,5 @@
+                 startActivity(new Intent(getApplicationContext(), HallOfFameActivity.class));
+             }
+         });
+-
+     }
+ }
+Index: app/src/main/java/com/example/puzzlegame/basededatos/AppDataBase.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/basededatos/AppDataBase.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/basededatos/AppDataBase.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -5,19 +5,24 @@
+ import androidx.room.Database;
+ import androidx.room.Room;
+ import androidx.room.RoomDatabase;
++import androidx.room.TypeConverters;
+ 
++import com.example.puzzlegame.basededatos.typeconverters.UriConverter;
+ import com.example.puzzlegame.model.GameApp;
+ import com.example.puzzlegame.model.GameSession;
+ import com.example.puzzlegame.model.Image;
+ import com.example.puzzlegame.model.Level;
++import com.example.puzzlegame.model.MusicSettings;
+ import com.example.puzzlegame.model.PieceData;
+ import com.example.puzzlegame.model.Score;
++import com.example.puzzlegame.model.Song;
+ import com.example.puzzlegame.model.User;
+ import com.example.puzzlegame.model.interfaces.DAO.AppDAO;
+ import com.example.puzzlegame.model.interfaces.DAO.GalleryDAO;
+ import com.example.puzzlegame.model.interfaces.DAO.GameSessionDAO;
+ import com.example.puzzlegame.model.interfaces.DAO.HallOfFameDAO;
+ import com.example.puzzlegame.model.interfaces.DAO.LevelDAO;
++import com.example.puzzlegame.model.interfaces.DAO.SongDAO;
+ import com.example.puzzlegame.model.interfaces.DAO.UserDAO;
+ 
+ 
+@@ -28,8 +33,11 @@
+         GameSession.class,
+         PieceData.class,
+         GameApp.class,
++        Song.class,
++        MusicSettings.class,
+         Score.class
+-}, version = 15)
++}, version = 2)
++@TypeConverters(UriConverter.class)
+ public abstract class AppDataBase extends RoomDatabase {
+     protected static AppDataBase appDataBase;
+ 
+@@ -45,7 +53,7 @@
+ 
+     public abstract UserDAO userDAO();
+ 
+-    //public abstract SongDAO songDAO();
++    public abstract SongDAO songDAO();
+ 
+     public abstract LevelDAO levelDAO();
+ 
+@@ -56,4 +64,5 @@
+     public abstract GameSessionDAO gameSessionDAO();
+ 
+     public abstract HallOfFameDAO hallOfFameDAO();
++
+ }
+Index: app/src/main/java/com/example/puzzlegame/basededatos/typeconverters/UriConverter.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/basededatos/typeconverters/UriConverter.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
++++ app/src/main/java/com/example/puzzlegame/basededatos/typeconverters/UriConverter.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -0,0 +1,25 @@
++package com.example.puzzlegame.basededatos.typeconverters;
++
++import android.net.Uri;
++
++import androidx.room.TypeConverter;
++
++public class UriConverter {
++    @TypeConverter
++    public static Uri stringToUri(String json){
++        if (json.equals("{}") || json.isEmpty()){
++            return null;
++        }
++        Uri uri = Uri.parse(json);
++        return uri;
++    }
++
++    @TypeConverter
++    public static String levelToString(Uri uri) {
++        if (uri == null) {
++            return "";
++        }
++        String json = uri.toString();
++        return json;
++    }
++}
+Index: app/src/main/java/com/example/puzzlegame/common/Utils.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/common/Utils.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/common/Utils.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -15,6 +15,8 @@
+ import com.example.puzzlegame.model.Piece;
+ import com.example.puzzlegame.model.PieceData;
+ 
++import java.io.File;
++import java.io.FileInputStream;
+ import java.io.IOException;
+ import java.io.InputStream;
+ import java.util.ArrayList;
+@@ -92,12 +94,58 @@
+         }
+     }
+ 
++    public static Image createImage(String src) {
++
++        int thumbW = 120;
++        int thumbH = 120;
++
++        try {
++            File imageFile = new File(src);
++            FileInputStream is = new FileInputStream(imageFile);
++            BitmapFactory.Options bmOptions = new BitmapFactory.Options();
++            bmOptions.inJustDecodeBounds = true;
++            BitmapFactory.decodeStream(is, new Rect(-1, -1, -1, -1), bmOptions);
++            int photoW = bmOptions.outWidth;
++            int photoH = bmOptions.outHeight;
++
++            is.reset();
++
++            Bitmap b = getScaledBitmap(src, photoW, thumbW, photoH, thumbH);
++
++            return new Image(src, b, photoW, photoH);
++
++        } catch (IOException e) {
++            e.printStackTrace();
++            return null;
++        }
++    }
++
+     public static Bitmap getScaledBitmap(AssetManager assetManager, String src, int originalW, int targetW, int originalH, int targetH) {
+ 
+         InputStream is = null;
+         try {
+             is = assetManager.open("img/" + src);
+             BitmapFactory.Options bmOptions = new BitmapFactory.Options();
++
++            bmOptions.inJustDecodeBounds = false;
++            bmOptions.inSampleSize = Math.min(originalW / targetW, originalH / targetH);
++
++            Bitmap b = BitmapFactory.decodeStream(is, new Rect(-1, -1, -1, -1), bmOptions);
++
++            return b;
++        } catch (IOException e) {
++            e.printStackTrace();
++            return null;
++        }
++    }
++
++    public static Bitmap getScaledBitmap(String src, int originalW, int targetW, int originalH, int targetH) {
++
++        InputStream is = null;
++        try {
++            File imageFile = new File(src);
++            is = new FileInputStream(src);
++            BitmapFactory.Options bmOptions = new BitmapFactory.Options();
+ 
+             bmOptions.inJustDecodeBounds = false;
+             bmOptions.inSampleSize = Math.min(originalW / targetW, originalH / targetH);
+Index: app/src/main/java/com/example/puzzlegame/model/GameApp.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/model/GameApp.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/model/GameApp.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -14,9 +14,9 @@
+ 
+     @PrimaryKey
+     public Integer appId;
++
+     @ColumnInfo(name = "currentUser")
+     public int currentUserId;
+-    public int songId;
+ 
+     //from musicSettings.class see https://developer.android.com/reference/androidx/room/Insert
+     public boolean playingMusic;
+Index: app/src/main/java/com/example/puzzlegame/model/MusicSettings.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/model/MusicSettings.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/model/MusicSettings.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,19 +1,29 @@
+ package com.example.puzzlegame.model;
+ 
+-import androidx.lifecycle.MutableLiveData;
++import android.net.Uri;
++
+ import androidx.room.ColumnInfo;
+ import androidx.room.Entity;
++import androidx.room.PrimaryKey;
+ 
+ @Entity
+ public class MusicSettings {
+-    @ColumnInfo(name = "playingMusic")
+-    private boolean playingMusic;
+-    @ColumnInfo(name = "musicVol")
+-    private double musicVol;
++
++    @PrimaryKey
++    public int musicSettingsId;
++    @ColumnInfo(defaultValue = "1")
++    public boolean playingMusic = true;
++    @ColumnInfo(defaultValue = "5")
++    public int musicVol = 5;
++    @ColumnInfo(defaultValue = "main")
++    public Uri currentSong = Uri.parse("main");
+ 
+-    public MusicSettings(boolean playingMusic, double musicVol) {
++    public MusicSettings(){}
++
++    public MusicSettings(boolean playingMusic, int musicVol, Uri currentSong) {
+         this.playingMusic = playingMusic;
+         this.musicVol = musicVol;
++        this.currentSong = currentSong;
+     }
+ 
+     public boolean isPlayingMusic() {
+@@ -28,7 +38,15 @@
+         return musicVol;
+     }
+ 
+-    public void setMusicVol(double musicVol) {
++    public void setMusicVol(int musicVol) {
+         this.musicVol = musicVol;
+     }
++
++    public void setCurrentSong(Uri currentSong) {
++        this.currentSong = currentSong;
++    }
++
++    public Uri getCurrentSong() {
++        return currentSong;
++    }
+ }
+Index: app/src/main/java/com/example/puzzlegame/model/Song.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/model/Song.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/model/Song.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,34 +1,30 @@
+ package com.example.puzzlegame.model;
+ 
+-import androidx.room.ColumnInfo;
++import android.net.Uri;
++
+ import androidx.room.Entity;
++import androidx.room.PrimaryKey;
+ 
+ @Entity
+ public class Song {
+-    @ColumnInfo (name = "source")
+-    private String source;
++    @PrimaryKey
++    public Integer songId;
+ 
+-    @ColumnInfo(name = "name")
+-    private String name;
++    public Uri source;
+ 
+-    public Song(String source, String name) {
++    public String name;
++
++    public Song(Uri source, String title) {
+         this.source = source;
+-        this.name = name;
++        this.name = title;
+     }
++    public Song() { }
+ 
+-    public String getSource() {
++    public Uri getSource() {
+         return source;
+     }
+ 
+-    public void setSource(String source) {
+-        this.source = source;
+-    }
+-
+     public String getName() {
+         return name;
+     }
+-
+-    public void setName(String name) {
+-        this.name = name;
+-    }
+ }
+Index: app/src/main/java/com/example/puzzlegame/model/interfaces/DAO/AppDAO.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/model/interfaces/DAO/AppDAO.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/model/interfaces/DAO/AppDAO.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,11 +1,14 @@
+ package com.example.puzzlegame.model.interfaces.DAO;
+ 
++import android.net.Uri;
++
+ import androidx.room.Dao;
+ import androidx.room.Insert;
+ import androidx.room.Query;
+ import androidx.room.Transaction;
+ 
+ import com.example.puzzlegame.model.GameApp;
++import com.example.puzzlegame.model.MusicSettings;
+ import com.example.puzzlegame.model.User;
+ 
+ @Dao
+@@ -36,4 +39,32 @@
+ 
+     @Insert
+     public abstract void setGameAppData(GameApp gameApp);
++
++    @Query("update musicsettings set currentSong = :source")
++    public abstract void setCurrentSong(Uri source);
++
++    @Query("select currentSong from musicsettings")
++    public abstract Uri getCurrentSong();
++
++    @Query("update musicsettings set playingMusic = :state")
++    public abstract void setMusicState(Boolean state);
++
++    @Query("update musicsettings set musicVol = :vol")
++    public abstract void setVolume(int vol);
++
++    @Query("select musicVol from musicsettings")
++    public abstract int getVolume();
++
++    @Query("select playingMusic from musicsettings")
++    public abstract boolean getMusicState();
++
++    @Transaction
++    public void setDefaultSettings(){
++        insertDefaultSettings(new MusicSettings());
++    }
++    @Insert
++    protected abstract void insertDefaultSettings(MusicSettings musicSettings);
++
++    @Query("select * from musicsettings limit 1")
++    public abstract MusicSettings getSettings();
+ }
+Index: app/src/main/java/com/example/puzzlegame/model/interfaces/DAO/SongDAO.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/model/interfaces/DAO/SongDAO.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/model/interfaces/DAO/SongDAO.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,5 +1,7 @@
+ package com.example.puzzlegame.model.interfaces.DAO;
+ 
++import android.net.Uri;
++
+ import androidx.room.Dao;
+ import androidx.room.Delete;
+ import androidx.room.Insert;
+@@ -20,6 +22,9 @@
+     @Query("SELECT * FROM Song WHERE name LIKE :name LIMIT 1")
+     Song findByName(String name);
+ 
++    @Query("SELECT * FROM Song WHERE source LIKE :source LIMIT 1")
++    Song findByUri(Uri source);
++
+     @Insert
+     void insertAll(Song... Songs);
+ 
+Index: app/src/main/java/com/example/puzzlegame/repository/GalleryRepository.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/repository/GalleryRepository.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/repository/GalleryRepository.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -121,4 +121,9 @@
+     public Image getCurrentImage() {
+         return currentImage;
+     }
++
++    public void addImage(Image img) {
++        imageList.add(img);
++        gallery.addImage(img);
++    }
+ }
+\ No newline at end of file
+Index: app/src/main/java/com/example/puzzlegame/repository/MusicPlayListRepository.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/repository/MusicPlayListRepository.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/repository/MusicPlayListRepository.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,4 +1,193 @@
+ package com.example.puzzlegame.repository;
+ 
++import android.app.Application;
++import android.net.Uri;
++import android.util.Log;
++
++import com.example.puzzlegame.basededatos.AppDataBase;
++import com.example.puzzlegame.common.Utils;
++import com.example.puzzlegame.model.MusicSettings;
++import com.example.puzzlegame.model.Song;
++
++import java.util.ArrayList;
++import java.util.List;
++
+ public class MusicPlayListRepository {
++    private static MusicPlayListRepository Instance;
++    private AppDataBase db;
++    private List<Song> playList;
++    private int volume;
++    private boolean musicState;
++    private MusicSettings settings;
++
++    private MusicPlayListRepository() {
++    }
++
++    public static MusicPlayListRepository getInstance() {
++        if (Instance == null) {
++            Instance = new MusicPlayListRepository();
++        }
++        return Instance;
++    }
++
++    public void initMusicPlayListRepository(Application app) {
++        db = Utils.getDB(app);
++        playList = new ArrayList<>();
++        try {
++            Thread t = new Thread(new Runnable() {
++                @Override
++                public void run() {
++                    settings = db.gameAppDAO().getSettings();
++                    if (settings == null) db.gameAppDAO().setDefaultSettings();
++                    playList = db.songDAO().getAll();
++                }
++            });
++            t.start();
++            t.join();
++        } catch (Exception ex) {
++            Log.d("PlayList", "initMusicPlayListRepository: Error on getList of Song");
++        }
++    }
++
++    public boolean getMusicState() {
++        try {
++            Thread t = new Thread(new Runnable() {
++                @Override
++                public void run() {
++                    musicState = db.gameAppDAO().getMusicState();
++                }
++            });
++            t.start();
++            t.join();
++            return musicState;
++        } catch (Exception ex) {
++            Log.d("PlayList", "initMusicPlayListRepository: Error on setMusicState of Song");
++            return false;
++        }
++    }
++
++    public List<Song> getPlayList() {
++        try {
++            Thread t = new Thread(new Runnable() {
++                @Override
++                public void run() {
++                    playList = db.songDAO().getAll();
++                }
++            });
++            t.start();
++            t.join();
++            return playList;
++        } catch (Exception ex) {
++            Log.d("PlayList", "initMusicPlayListRepository: Error on setMusicState of Song");
++            return new ArrayList<>();
++        }
++    }
++
++    public int getVolume() {
++        try {
++            Thread t = new Thread(new Runnable() {
++                @Override
++                public void run() {
++                   volume = db.gameAppDAO().getVolume();
++                }
++            });
++            t.start();
++            t.join();
++            return volume;
++        } catch (Exception ex) {
++            Log.d("PlayList", "initMusicPlayListRepository: Error on setMusicState of Song");
++            return 0;
++        }
++    }
++
++    public void setVolume(final int vol) {
++        settings.setMusicVol(vol);
++        try {
++            Thread t = new Thread(new Runnable() {
++                @Override
++                public void run() {
++                    db.gameAppDAO().setVolume(vol);
++                }
++            });
++            t.start();
++            t.join();
++        } catch (Exception ex) {
++            Log.d("PlayList", "initMusicPlayListRepository: Error on setMusicState of Song");
++        }
++    }
++
++    public void setMusicState(final Boolean state) {
++        settings.setPlayingMusic(state);
++        try {
++            Thread t = new Thread(new Runnable() {
++                @Override
++                public void run() {
++                    db.gameAppDAO().setMusicState(state);
++                }
++            });
++            t.start();
++            t.join();
++        } catch (Exception ex) {
++            Log.d("PlayList", "initMusicPlayListRepository: Error on setMusicState of Song");
++        }
++    }
++
++    public void setPlayList(final List<Song> aux) {
++        try {
++            Thread t = new Thread(new Runnable() {
++                @Override
++                public void run() {
++                    for (Song s : aux) {
++                        db.songDAO().insertAll((Song) aux);
++                    }
++                }
++            });
++            t.start();
++            t.join();
++        } catch (Exception ex) {
++            Log.d("PlayList", "initMusicPlayListRepository: Error on setMusicState of Song");
++        }
++    }
++
++    public void setCurrentSong(final Song song) {
++        settings.setCurrentSong(song.source);
++        try {
++            Thread t = new Thread(new Runnable() {
++                @Override
++                public void run() {
++                    if (db.songDAO().findByName(song.getName()) == null) {
++                        db.songDAO().insertAll(song);
++                    }
++                    db.gameAppDAO().setCurrentSong(song.getSource());
++                }
++            });
++            t.start();
++            t.join();
++        } catch (Exception ex) {
++            Log.d("PlayList", "initMusicPlayListRepository: Error on setMusicState of Song");
++        }
++    }
++
++    public Song getLastPlayedSong() {
++        final Song[] song = new Song[1];
++        try {
++            Thread t = new Thread(new Runnable() {
++                @Override
++                public void run() {
++                    Uri uri = db.gameAppDAO().getCurrentSong();
++                    song[0] = db.songDAO().findByUri(uri);
++                }
++            });
++            t.start();
++            t.join();
++            return song[0];
++        } catch (Exception ex) {
++            Log.d("PlayList", "initMusicPlayListRepository: Error on setMusicState of Song");
++            return null;
++        }
++    }
++
++    public MusicSettings getSettings() {
++        return settings;
++    }
+ }
+Index: app/src/main/java/com/example/puzzlegame/ui/SelectGame/SelectGameActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/SelectGame/SelectGameActivity.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/SelectGame/SelectGameActivity.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,4 +1,4 @@
+-package com.example.puzzlegame.ui.SelectGame;
++package com.example.puzzlegame.ui.selectGame;
+ 
+ import android.content.Intent;
+ import android.os.Bundle;
+@@ -14,8 +14,8 @@
+ import com.example.puzzlegame.common.CommonBarMethods;
+ import com.example.puzzlegame.model.GameSession;
+ import com.example.puzzlegame.model.User;
+-import com.example.puzzlegame.ui.SelectLevel.SelectLevelActivity;
+-import com.example.puzzlegame.ui.SelectPreviousGames.SelectPreviousGamesActivity;
++import com.example.puzzlegame.ui.selectLevel.SelectLevelActivity;
++import com.example.puzzlegame.ui.selectPreviousGames.SelectPreviousGamesActivity;
+ import com.example.puzzlegame.ui.common.BaseActivity;
+ import com.example.puzzlegame.ui.game.PuzzleGameActivity;
+ 
+Index: app/src/main/java/com/example/puzzlegame/ui/SelectGame/SelectGameViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/SelectGame/SelectGameViewModel.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/SelectGame/SelectGameViewModel.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,4 +1,4 @@
+-package com.example.puzzlegame.ui.SelectGame;
++package com.example.puzzlegame.ui.selectGame;
+ 
+ import android.app.Application;
+ 
+Index: app/src/main/java/com/example/puzzlegame/ui/SelectLevel/SelectLevelActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/SelectLevel/SelectLevelActivity.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/SelectLevel/SelectLevelActivity.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,13 +1,15 @@
+-package com.example.puzzlegame.ui.SelectLevel;
++package com.example.puzzlegame.ui.selectLevel;
+ 
+ import android.annotation.SuppressLint;
+ import android.content.Intent;
++import android.os.Build;
+ import android.os.Bundle;
+ import android.view.View;
+ import android.widget.Button;
+ import android.widget.CompoundButton;
+ import android.widget.TextView;
+ 
++import androidx.annotation.RequiresApi;
+ import androidx.lifecycle.ViewModelProvider;
+ 
+ import com.example.puzzlegame.R;
+@@ -59,7 +61,9 @@
+                 public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+                     if (!automaticChanged) {
+                         if (isChecked) {
+-                            setLvl(buttonView);
++                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
++                                setLvl(buttonView);
++                            }
+                         }
+                         buttonView.setChecked(true);
+                         automaticChanged = false;
+@@ -99,6 +103,7 @@
+         setLvl(levelId);
+     }
+ 
++    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
+     @SuppressLint({"NonConstantResourceId", "UseCompatLoadingForDrawables"})
+     private void setLvl(CompoundButton switchBtn) {
+         int lvl = 0;
+Index: app/src/main/java/com/example/puzzlegame/ui/SelectLevel/SelectLevelViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/SelectLevel/SelectLevelViewModel.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/SelectLevel/SelectLevelViewModel.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,4 +1,4 @@
+-package com.example.puzzlegame.ui.SelectLevel;
++package com.example.puzzlegame.ui.selectLevel;
+ 
+ import androidx.lifecycle.ViewModel;
+ 
+Index: app/src/main/java/com/example/puzzlegame/ui/SelectPreviousGames/SelectPreviousGamesActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/SelectPreviousGames/SelectPreviousGamesActivity.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/SelectPreviousGames/SelectPreviousGamesActivity.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,4 +1,4 @@
+-package com.example.puzzlegame.ui.SelectPreviousGames;
++package com.example.puzzlegame.ui.selectPreviousGames;
+ 
+ import android.content.Intent;
+ import android.os.Bundle;
+Index: app/src/main/java/com/example/puzzlegame/ui/SelectPreviousGames/SelectPreviousGamesViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/SelectPreviousGames/SelectPreviousGamesViewModel.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/SelectPreviousGames/SelectPreviousGamesViewModel.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,4 +1,4 @@
+-package com.example.puzzlegame.ui.SelectPreviousGames;
++package com.example.puzzlegame.ui.selectPreviousGames;
+ 
+ import androidx.lifecycle.LiveData;
+ import androidx.lifecycle.MutableLiveData;
+Index: app/src/main/java/com/example/puzzlegame/ui/common/BaseActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/common/BaseActivity.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/common/BaseActivity.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,6 +1,11 @@
+ package com.example.puzzlegame.ui.common;
+ 
++import android.app.ActivityManager;
++import android.content.ComponentName;
++import android.content.Context;
+ import android.content.Intent;
++import android.media.AudioManager;
++import android.media.MediaPlayer;
+ import android.view.Menu;
+ import android.view.MenuItem;
+ import android.view.View;
+@@ -12,17 +17,105 @@
+ import androidx.appcompat.app.ActionBar;
+ import androidx.appcompat.app.AppCompatActivity;
+ import androidx.fragment.app.FragmentTransaction;
++import androidx.lifecycle.Observer;
++import androidx.lifecycle.ViewModelProvider;
+ 
+ import com.example.puzzlegame.Help;
+ import com.example.puzzlegame.R;
+-import com.example.puzzlegame.ScrollingFragmentOptions;
++import com.example.puzzlegame.model.Song;
+ import com.example.puzzlegame.ui.game.PuzzleGameActivity;
++import com.example.puzzlegame.ui.settings.SettingsFragment;
++import com.example.puzzlegame.ui.settings.SettingsViewModel;
++
++import java.io.IOException;
++import java.util.List;
+ 
+ public class BaseActivity extends AppCompatActivity {
+ 
+     private boolean showingSettings;
+-    private ScrollingFragmentOptions settingsFragment;
++    private SettingsFragment settingsFragment;
+     private Chronometer timer;
++    private MediaPlayer mediaPlayer;
++    private GameAppViewModel gameAppViewModel;
++    private SettingsViewModel settingsViewModel;
++
++    protected void begin() {
++        gameAppViewModel = new ViewModelProvider(this).get(GameAppViewModel.class);
++        gameAppViewModel.begin(getApplication());
++        settingsViewModel = new ViewModelProvider(this).get(SettingsViewModel.class);
++        beginListeners();
++    }
++
++    private void beginListeners() {
++        final Observer<Boolean> MusicState = new Observer<Boolean>() {
++            @Override
++            public void onChanged(Boolean musicState) {
++                if (musicState) {
++                    restartSong();
++                } else {
++                    pauseMusic();
++                }
++            }
++        };
++        settingsViewModel.getMusicStateObservable().observe(this, MusicState);
++
++        final Observer<Song> lastPlayedSongObserver = new Observer<Song>() {
++            @Override
++            public void onChanged(Song song) {
++                changeSong(song);
++            }
++        };
++        settingsViewModel.getLastPlayedSongObservable().observe(this, lastPlayedSongObserver);
++
++        final Observer<Boolean> musicStateObserver = new Observer<Boolean>() {
++            @Override
++            public void onChanged(Boolean state) {
++                if (!state) {
++                    pauseMusic();
++                }
++            }
++        };
++        settingsViewModel.getMusicStateObservable().observe(this, musicStateObserver);
++
++        final Observer<Integer> volumeObserver = new Observer<Integer>() {
++            @Override
++            public void onChanged(Integer vol) {
++                setVolume(vol);
++            }
++        };
++        settingsViewModel.getVolumeObservable().observe(this, volumeObserver);
++    }
++
++    public void playRawTheme() {
++        if (mediaPlayer != null) {
++            releaseMusicPlayer();
++        }
++
++        mediaPlayer = MediaPlayer.create(this, R.raw.puzzledroid_theme);
++        if (mediaPlayer == null) {
++            Toast.makeText(this, getString(R.string.No_AudioFile), Toast.LENGTH_SHORT).show();
++            return;
++        }
++        mediaPlayer.setLooping(true);
++        mediaPlayer.start();
++    }
++
++    public void pauseMusic() {
++        if (mediaPlayer == null) return;
++
++        mediaPlayer.pause();
++    }
++
++    protected void releaseMusicPlayer() {
++        if (mediaPlayer == null) return;
++
++        mediaPlayer.release();
++        mediaPlayer = null;
++    }
++
++    public void startMusic() {
++
++    }
+ 
+     @Override
+     public void onBackPressed() {
+@@ -44,14 +137,13 @@
+     public boolean onCreateOptionsMenu(Menu menu) {
+         getMenuInflater().inflate(R.menu.main_menu, menu);
+         showingSettings = false;
+-        settingsFragment = new ScrollingFragmentOptions();
++        settingsFragment = new SettingsFragment();
+         timer = findViewById(R.id.timer);
+         return super.onCreateOptionsMenu(menu);
+     }
+ 
+     /**
+      * Contains the logic from menu items clicked.
+-     *
+      * @param item
+      * @return
+      */
+@@ -67,6 +159,7 @@
+                 ft.addToBackStack(Tag);
+                 ft.replace(R.id.settings, settingsFragment, Tag);
+                 ft.commitAllowingStateLoss();
++
+                 if (timer.getVisibility() == View.VISIBLE) {
+                     PuzzleGameActivity.pauseTimer();
+                 }
+@@ -77,12 +170,10 @@
+             return true;
+         } else if (item.getItemId() == R.id.action_help) {
+             startActivity(new Intent(getApplicationContext(), Help.class));
+-
+             return true;
+         } else {
+             Toast.makeText(getApplicationContext(), "Action not implemented", Toast.LENGTH_SHORT).show();
+         }
+-
+         return super.onOptionsItemSelected(item);
+     }
+ 
+@@ -90,4 +181,99 @@
+         ActionBar actionBar = getSupportActionBar();
+         actionBar.setHomeAsUpIndicator(drawableIcon);
+     }
++
++    public void restartSong() {
++        if (mediaPlayer == null) {
++           // Song song = settingsViewModel.getLastPlayedSongObservable().getValue();
++        //    if (song == null || song.name.equals("main"))
++        //        playRawTheme();
++            return;
++        }
++        if (!mediaPlayer.isPlaying()) {
++            Song song = settingsViewModel.getLastPlayedSongObservable().getValue();
++            if (song == null) {
++                playRawTheme();
++            } else
++            {
++                try {
++                    mediaPlayer.reset();
++                    mediaPlayer.setDataSource(this,song.source);
++                    mediaPlayer.prepare();
++                    mediaPlayer.start();
++                } catch (IOException e) {
++                    playRawTheme();
++                }
++            }
++        }
++    }
++
++    public void changeSong(Song song) {
++        if (mediaPlayer != null){
++            releaseMusicPlayer();
++        }
++        try {
++            if (song == null) {
++                playRawTheme();
++                return;
++            }
++            mediaPlayer = new MediaPlayer();
++            mediaPlayer.setDataSource(getApplicationContext(), song.getSource());
++            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
++            mediaPlayer.prepare();
++            mediaPlayer.start();
++
++            Toast.makeText(this, getString(R.string.play_music), Toast.LENGTH_SHORT).show();
++
++        } catch (IOException e) {
++            e.printStackTrace();
++        }
++    }
++
++    public void setVolume(int progress) {
++        AudioManager manager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);
++        manager.setStreamVolume(AudioManager.STREAM_MUSIC, progress, 0);
++    }
++
++    @Override
++    protected void onPause() {
++        super.onPause();
++        if (isApplicationBroughtToBackground(this))
++            pauseMusic();
++    }
++
++    @Override
++    protected void onResume() {
++        super.onResume();
++        if (isAppOnForeground(this))
++            restartSong();
++    }
++
++    public boolean isAppOnForeground(final Context context)
++    {
++        final ActivityManager activityManager = (ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);
++        final List<ActivityManager.RunningAppProcessInfo> appProcesses = activityManager.getRunningAppProcesses();
++        if (appProcesses == null)
++            return false;
++        final String packageName = context.getPackageName();
++        for (final ActivityManager.RunningAppProcessInfo appProcess : appProcesses)
++        {
++            if ((appProcess.importance == ActivityManager.RunningAppProcessInfo.IMPORTANCE_FOREGROUND)
++                && appProcess.processName.equals(packageName))
++                return true;
++        }
++        return false;
++    }
++
++    public static boolean isApplicationBroughtToBackground(final Context context)
++    {
++        final ActivityManager am = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
++        final List<ActivityManager.RunningTaskInfo> tasks = am.getRunningTasks(1);
++        if (!tasks.isEmpty())
++        {
++            final ComponentName topActivity = tasks.get(0).topActivity;
++            if (!topActivity.getPackageName().equals(context.getPackageName()))
++                return true;
++        }
++        return false;
++    }
+ }
+\ No newline at end of file
+Index: app/src/main/java/com/example/puzzlegame/ui/common/GameAppViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/common/GameAppViewModel.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
++++ app/src/main/java/com/example/puzzlegame/ui/common/GameAppViewModel.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -0,0 +1,23 @@
++package com.example.puzzlegame.ui.common;
++
++import android.app.Application;
++
++import androidx.lifecycle.ViewModel;
++
++import com.example.puzzlegame.repository.GalleryRepository;
++import com.example.puzzlegame.repository.GameAppRepository;
++import com.example.puzzlegame.repository.HallOfFameRepository;
++
++public class GameAppViewModel extends ViewModel {
++    GameAppRepository gameAppRepository;
++    GalleryRepository galleryRepository;
++    HallOfFameRepository hallOfFameRepository;
++
++    public void begin(Application application) {
++        galleryRepository = GalleryRepository.initGalleryRepository(application);
++        gameAppRepository = GameAppRepository.initGameAppRepository(application);
++        hallOfFameRepository = HallOfFameRepository.getInstance();
++        gameAppRepository.getCurrentUser(); // pendiente de actualización con la implementación del login
++        hallOfFameRepository.initHallOfFameRepository(application);
++    }
++}
+Index: app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryActivity.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryActivity.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,10 +1,19 @@
+ package com.example.puzzlegame.ui.gallery;
+ 
++import android.Manifest;
+ import android.content.Intent;
++import android.content.pm.PackageManager;
+ import android.content.res.AssetManager;
++import android.net.Uri;
++import android.os.Build;
+ import android.os.Bundle;
++import android.view.View;
++import android.widget.Toast;
+ 
+ import androidx.annotation.Nullable;
++import androidx.annotation.RequiresApi;
++import androidx.core.app.ActivityCompat;
++import androidx.core.content.ContextCompat;
+ import androidx.lifecycle.Observer;
+ import androidx.lifecycle.ViewModelProvider;
+ import androidx.recyclerview.widget.GridLayoutManager;
+@@ -17,17 +26,22 @@
+ import com.example.puzzlegame.model.Level;
+ import com.example.puzzlegame.ui.common.BaseActivity;
+ import com.example.puzzlegame.ui.game.PuzzleGameActivity;
++import com.google.android.material.floatingactionbutton.FloatingActionButton;
+ 
+ import java.util.ArrayList;
+ import java.util.List;
+ 
+ public class GalleryActivity extends BaseActivity implements GalleryAdapter.OnImageListener {
+ 
++    static final int REQUEST_READ_EXTERNAL_STORAGE = 5;
++    static final int REQUEST_IMAGE_GALLERY = 2;
++
+     private GalleryViewModel galleryViewModel;
+     private Level levelSelected;
+     private List<Image> galleryImages = new ArrayList<>();
+     private RecyclerView galleryGridView;
+     private RecyclerView.Adapter<GalleryAdapter.MyViewHolder> adapter;
++    private FloatingActionButton addFromGalleryButton;
+     AssetManager assetManager;
+ 
+     @Override
+@@ -59,15 +73,22 @@
+ 
+         LinearLayoutManager layoutManager = new GridLayoutManager(this, 3);
+         galleryGridView.setLayoutManager(layoutManager);
+-
++        addFromGalleryButton = findViewById(R.id.addImageButton);
+         setListeners();
+-
+         galleryViewModel.updateGallery(assetManager);
+     }
+ 
+     private void setListeners() {
+-        //listener para el botón carrete
+-        //listener para el botón cámara
++        addFromGalleryButton.setOnClickListener(new View.OnClickListener() {
++            @Override
++            public void onClick(View v) {
++                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
++                    getImageFromGallery();
++                } else {
++                    Toast.makeText(getApplicationContext(), getString(R.string.not_available), Toast.LENGTH_LONG).show();
++                }
++            }
++        });
+ 
+         //LiveData
+         final Observer<List<Image>> galleryImagesObserver = new Observer<List<Image>>() {
+@@ -95,4 +116,26 @@
+         intent.putExtra("gameLevel", levelSelected);
+         startActivity(intent);
+     }
++
++    @RequiresApi(api = Build.VERSION_CODES.JELLY_BEAN)
++    public void getImageFromGallery() {
++        onRequestPermissionsResult(REQUEST_READ_EXTERNAL_STORAGE, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, new int[]{PackageManager.PERMISSION_GRANTED});
++        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
++            ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_EXTERNAL_STORAGE);
++            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_EXTERNAL_STORAGE);
++        } else {
++            Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
++            intent.setType("image/*");
++            startActivityForResult(intent, REQUEST_IMAGE_GALLERY);
++        }
++    }
++
++    @Override
++    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
++        super.onActivityResult(requestCode, resultCode, data);
++        if (requestCode == REQUEST_IMAGE_GALLERY && resultCode == RESULT_OK) {
++            Uri uri = data.getData();
++            galleryViewModel.addImage(uri);
++        }
++    }
+ }
+\ No newline at end of file
+Index: app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryAdapter.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryAdapter.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryAdapter.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -54,7 +54,7 @@
+ 
+         public MyViewHolder(@NonNull View view, OnImageListener onImageListener) {
+             super(view);
+-            this.imageView = (ImageView) view.findViewById(R.id.gridImageview);
++            this.imageView = view.findViewById(R.id.gridImageview);
+             this.onImageListener = onImageListener;
+ 
+             imageView.setOnClickListener(this);
+Index: app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryViewModel.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/gallery/GalleryViewModel.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,11 +1,13 @@
+ package com.example.puzzlegame.ui.gallery;
+ 
+ import android.content.res.AssetManager;
++import android.net.Uri;
+ 
+ import androidx.lifecycle.LiveData;
+ import androidx.lifecycle.MutableLiveData;
+ import androidx.lifecycle.ViewModel;
+ 
++import com.example.puzzlegame.common.Utils;
+ import com.example.puzzlegame.model.Image;
+ import com.example.puzzlegame.repository.GalleryRepository;
+ 
+@@ -23,9 +25,19 @@
+ 
+     public void updateGallery(AssetManager assetManager) {
+         galleryRepository.updateImageList(assetManager, true);
++        updateGallery();
++    }
++
++    private void updateGallery() {
+         galleryImages.postValue(galleryRepository.getImageList());
+     }
+ 
++    public void addImage(Uri imageUri){
++        Image img = Utils.createImage(imageUri.toString());
++        galleryRepository.addImage(img);
++        updateGallery();
++    }
++
+     public void setImageToBackground(Image image) {
+         galleryRepository.setCurrentBGBitmap(image);
+     }
+Index: app/src/main/java/com/example/puzzlegame/ui/game/OnPieceListener.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/game/OnPieceListener.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/game/OnPieceListener.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,10 +1,14 @@
+ package com.example.puzzlegame.ui.game;
+ 
++import android.content.Context;
++import android.media.MediaPlayer;
+ import android.view.MotionEvent;
+ import android.view.View;
+ import android.view.ViewGroup;
+ import android.widget.RelativeLayout;
+ import android.animation.ObjectAnimator;
++
++import com.example.puzzlegame.R;
+ import com.example.puzzlegame.model.Piece;
+ 
+ import static java.lang.Math.abs;
+@@ -16,6 +20,7 @@
+     private float xDelta;
+     private float yDelta;
+     private PuzzleGameViewModel gameViewModel;
++    private Context context;
+ 
+     public OnPieceListener(PuzzleGameViewModel gameViewModel) {
+         this.gameViewModel = gameViewModel;
+@@ -38,6 +43,9 @@
+                 xDelta = x - lParams.leftMargin;
+                 yDelta = y - lParams.topMargin;
+                 piece.bringToFront();
++                ObjectAnimator animation1 = ObjectAnimator.ofFloat(piece, "alpha", 0.5f,1f);
++                animation1.setDuration(600);
++                animation1.start();
+ 
+                 break;
+             case MotionEvent.ACTION_MOVE:
+@@ -61,7 +69,6 @@
+                 }
+                 break;
+         }
+-
+         return true;
+     }
+ 
+Index: app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameActivity.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameActivity.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -14,7 +14,7 @@
+ import com.example.puzzlegame.R;
+ import com.example.puzzlegame.common.CommonBarMethods;
+ import com.example.puzzlegame.model.Score;
+-import com.example.puzzlegame.ui.SelectLevel.SelectLevelActivity;
++import com.example.puzzlegame.ui.selectLevel.SelectLevelActivity;
+ import com.example.puzzlegame.ui.common.BaseActivity;
+ 
+ import java.util.List;
+@@ -22,7 +22,6 @@
+ public class HallOfFameActivity extends BaseActivity {
+ 
+     private HallOfFameViewModel hallOfFameViewModel;
+-    private Button btnNewGame;
+     private ImageButton changeHoF;
+ 
+     private Score score;
+@@ -47,9 +46,8 @@
+     }
+ 
+     private void setViews() {
+-        btnNewGame = findViewById(R.id.btn_newGame);
++        Button btnNewGame = findViewById(R.id.btn_newGame);
+         winnersListView = findViewById(R.id.winners_list);
+-        winnersListView.setHasFixedSize(false);
+ 
+         LinearLayoutManager layoutManager = new LinearLayoutManager(this);
+         winnersListView.setLayoutManager(layoutManager);
+Index: app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameAdapter.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameAdapter.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameAdapter.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -53,9 +53,9 @@
+         //on create get the cach the resource view objects
+         public MyViewHolder(View view) {
+            super(view);
+-           this.positionTView = (TextView) view.findViewById(R.id.position);
+-           this.nameTView = (TextView) view.findViewById(R.id.name);
+-           this.scoreTView = (TextView) view.findViewById(R.id.score);
++           this.positionTView = view.findViewById(R.id.position);
++           this.nameTView = view.findViewById(R.id.name);
++           this.scoreTView = view.findViewById(R.id.score);
+         }
+ 
+         //set values and custom appearance for each row of the adapter views
+Index: app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameViewModel.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/halloffame/HallOfFameViewModel.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -21,7 +21,6 @@
+     public void init(Application application) {
+         hallOfFameRepository = new HallOfFameRepository();
+         hallOfFameRepository.initHallOfFameRepository(application);
+-
+     }
+ 
+     public void getScores(){
+Index: app/src/main/java/com/example/puzzlegame/ui/settings/PlayListAdapter.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/settings/PlayListAdapter.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
++++ app/src/main/java/com/example/puzzlegame/ui/settings/PlayListAdapter.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -0,0 +1,76 @@
++package com.example.puzzlegame.ui.settings;
++
++import android.content.Context;
++import android.view.LayoutInflater;
++import android.view.View;
++import android.view.ViewGroup;
++import android.widget.RadioButton;
++
++import androidx.annotation.NonNull;
++import androidx.recyclerview.widget.RecyclerView;
++
++import com.example.puzzlegame.R;
++import com.example.puzzlegame.model.Song;
++
++import java.util.List;
++
++public class PlayListAdapter extends RecyclerView.Adapter<PlayListAdapter.MyViewHolder> {
++
++    private final List<Song> playlist;
++    private final OnSongListener onSongListener;
++    private final Context context;
++
++    public PlayListAdapter(Context context, List<Song> playlist, OnSongListener onSongListener) {
++        this.playlist = playlist;
++        this.context = context;
++        this.onSongListener = onSongListener;
++    }
++
++    @NonNull
++    @Override
++    public PlayListAdapter.MyViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
++        ViewGroup viewGroup = (ViewGroup) LayoutInflater.from(parent.getContext()).inflate(R.layout.fragment_scrolling_adapter, parent, false);
++        return new MyViewHolder(viewGroup, onSongListener);
++    }
++
++    @Override
++    public void onBindViewHolder(@NonNull MyViewHolder holder, int position) {
++        boolean last = false;
++        if (position == playlist.size()) {
++            last = true;
++        }
++        holder.bind(playlist.get(position), position);
++    }
++
++    @Override
++    public int getItemCount() {
++        return playlist.size();
++    }
++
++    public static class MyViewHolder extends RecyclerView.ViewHolder implements View.OnClickListener {
++
++        private final RadioButton rb_button;
++        private final OnSongListener onSongListener;
++
++        public MyViewHolder(@NonNull View itemView, OnSongListener onSongListener) {
++            super(itemView);
++            rb_button = itemView.findViewById(R.id.rb_song);
++            this.onSongListener = onSongListener;
++
++            rb_button.setOnClickListener(this);
++        }
++
++        public void bind(Song song, int position) {
++            rb_button.setText(song.getName());
++        }
++
++        @Override
++        public void onClick(View v) {
++            onSongListener.onSongClick(getAdapterPosition());
++        }
++    }
++
++    public interface OnSongListener {
++        void onSongClick(int position);
++    }
++}
+Index: app/src/main/java/com/example/puzzlegame/ui/settings/SettingsFragment.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/settings/SettingsFragment.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
++++ app/src/main/java/com/example/puzzlegame/ui/settings/SettingsFragment.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -0,0 +1,261 @@
++package com.example.puzzlegame.ui.settings;
++
++import android.Manifest;
++import android.content.Context;
++import android.content.Intent;
++import android.content.pm.PackageManager;
++import android.net.Uri;
++import android.os.Bundle;
++import android.view.LayoutInflater;
++import android.view.View;
++import android.view.ViewGroup;
++import android.widget.Button;
++import android.widget.CompoundButton;
++import android.widget.RadioButton;
++import android.widget.SeekBar;
++
++import androidx.annotation.NonNull;
++import androidx.annotation.Nullable;
++import androidx.appcompat.widget.SwitchCompat;
++import androidx.core.app.ActivityCompat;
++import androidx.core.content.ContextCompat;
++import androidx.fragment.app.Fragment;
++import androidx.lifecycle.Observer;
++import androidx.lifecycle.ViewModelProvider;
++import androidx.recyclerview.widget.RecyclerView;
++
++import com.example.puzzlegame.R;
++import com.example.puzzlegame.model.MusicSettings;
++import com.example.puzzlegame.model.Song;
++import com.example.puzzlegame.ui.common.BaseActivity;
++
++import java.util.List;
++
++import static android.app.Activity.RESULT_OK;
++
++
++public class SettingsFragment extends Fragment implements PlayListAdapter.OnSongListener {
++
++    private static final int REQUEST_READ_EXTERNAL_STORAGE = 1;
++    private BaseActivity baseActivity;
++    private View _fragmentItems;
++    private SwitchCompat onOffMusic;
++    private RadioButton rb_officialThemeMusic, rb_newSong, rb_song1, rb_song2, rb_song3,
++            radioButton6, radioButton7, radioButton8, radioButton9;
++    private SeekBar volumeBar;
++    private RecyclerView playListView;
++    private Button btn_musicSelection;
++    private SettingsViewModel settingsViewModel;
++    private RecyclerView.Adapter<PlayListAdapter.MyViewHolder> adapter;
++    private List<Song> cachedPlayList;
++    private boolean soundActive;
++    private MusicSettings settings;
++
++
++    @Override
++    public void onAttach(@NonNull Context activity) {
++
++        super.onAttach(activity);
++    }
++
++    public SettingsFragment() {
++
++    }
++
++    @Nullable
++    @Override
++    public View onCreateView(@NonNull LayoutInflater inflater,
++                             @Nullable ViewGroup container,
++                             @Nullable Bundle savedInstanceState) {
++
++        _fragmentItems = inflater.inflate(R.layout.fragment_scrolling_options, container, false);
++        baseActivity = (BaseActivity) getActivity();
++        settingsViewModel = new ViewModelProvider(this).get(SettingsViewModel.class);
++        setViews();
++        setSettingsValues();
++        setListeners();
++        setLiveData();
++        return _fragmentItems;
++    }
++
++    private void setSettingsValues() {
++        settings = settingsViewModel.getSettings();
++        boolean isMainThemePlaying = settings.currentSong.toString().equals("main");
++        rb_officialThemeMusic.setChecked(isMainThemePlaying);
++        onOffMusic.setChecked(settings.playingMusic);
++        volumeBar.setProgress(settings.musicVol);
++    }
++
++    private void setViews() {
++        onOffMusic = _fragmentItems.findViewById(R.id.switchONOFF);
++        volumeBar = _fragmentItems.findViewById(R.id.volBar);
++        rb_officialThemeMusic = _fragmentItems.findViewById(R.id.rb_officialTheme);
++        rb_newSong = _fragmentItems.findViewById(R.id.rb_ownerMusic);
++
++        btn_musicSelection = _fragmentItems.findViewById(R.id.btn_selMusic);
++        playListView = _fragmentItems.findViewById(R.id.RV_songs);
++        settings = settingsViewModel.getSettings();
++    }
++
++    public void setListeners() {
++        btn_musicSelection.setOnClickListener(new View.OnClickListener() {
++            @Override
++            public void onClick(View v) {
++                if (rb_officialThemeMusic.isChecked()) {
++                    Song song = new Song(Uri.parse("main"), "main_theme");
++                    settingsViewModel.setCurrentSong(song);
++                    baseActivity.playRawTheme();
++                } else if (rb_newSong.isChecked()) {
++                    getSong();
++                } else
++                    MusicOff();
++            }
++        });
++
++        onOffMusic.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
++            @Override
++            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
++                if (isChecked) {
++                    soundActive = true;
++                    baseActivity.changeSong(null);
++                    settingsViewModel.setMusicPlaying(true);
++                } else {
++                    soundActive = false;
++                    baseActivity.pauseMusic();
++                    settingsViewModel.setMusicPlaying(false);
++                }
++            }
++        });
++
++        volumeBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() {
++            int _setVolume;
++
++            @Override
++            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
++                _setVolume = progress;
++                baseActivity.setVolume(progress);
++            }
++
++            @Override
++            public void onStartTrackingTouch(SeekBar seekBar) {
++
++            }
++
++            @Override
++            public void onStopTrackingTouch(SeekBar seekBar) {
++                if (seekBar.getProgress() == 0)
++                    baseActivity.pauseMusic();
++                else {
++                    if (soundActive) {
++                        baseActivity.restartSong();
++                    }
++                }
++                settingsViewModel.set_volume(_setVolume);
++            }
++        });
++    }
++
++    private void getSong() {
++        onRequestPermissionsResult(REQUEST_READ_EXTERNAL_STORAGE, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, new int[]{PackageManager.PERMISSION_GRANTED});
++        if (ContextCompat.checkSelfPermission(baseActivity, Manifest.permission.READ_EXTERNAL_STORAGE) != PackageManager.PERMISSION_GRANTED) {
++            ActivityCompat.shouldShowRequestPermissionRationale(baseActivity, Manifest.permission.READ_EXTERNAL_STORAGE);
++            ActivityCompat.requestPermissions(baseActivity, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQUEST_READ_EXTERNAL_STORAGE);
++        }
++
++        Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
++        intent.setType("audio/*");
++        startActivityForResult(intent, REQUEST_READ_EXTERNAL_STORAGE);
++    }
++
++    @Override
++    public void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
++        if (requestCode == REQUEST_READ_EXTERNAL_STORAGE && resultCode == RESULT_OK) {
++            Uri uri = data.getData();
++            Song song = new Song(uri, data.getStringExtra("Name"));
++            settingsViewModel.setCurrentSong(song);
++        }
++    }
++
++    public void setLiveData() {
++        final Observer<List<Song>> playListObserver = new Observer<List<Song>>() {
++            @Override
++            public void onChanged(List<Song> playlist) {
++                if (cachedPlayList == null) {
++                    cachedPlayList = playlist;
++                }
++                inflatePlayList();
++                adapter.notifyDataSetChanged();
++            }
++        };
++        settingsViewModel.getPlayListObservable().observe(getViewLifecycleOwner(), playListObserver);
++
++        final Observer<Song> lastPlayedSongObserver = new Observer<Song>() {
++            @Override
++            public void onChanged(Song song) {
++                baseActivity.changeSong(song);
++            }
++        };
++        settingsViewModel.getLastPlayedSongObservable().observe(getViewLifecycleOwner(), lastPlayedSongObserver);
++
++        final Observer<Boolean> musicStateObserver = new Observer<Boolean>() {
++            @Override
++            public void onChanged(Boolean state) {
++                soundActive = state;
++                onOffMusic.setChecked(state);
++            }
++        };
++        settingsViewModel.getMusicStateObservable().observe(getViewLifecycleOwner(), musicStateObserver);
++
++        final Observer<Integer> volumeObserver = new Observer<Integer>() {
++            @Override
++            public void onChanged(Integer vol) {
++                volumeBar.setProgress(vol);
++            }
++        };
++        settingsViewModel.getVolumeObservable().observe(getViewLifecycleOwner(), volumeObserver);
++    }
++
++    private void inflatePlayList() {
++        adapter = new PlayListAdapter(getContext(), cachedPlayList, this);
++        playListView.setAdapter(adapter);
++    }
++
++    private void MusicOff() {
++        onOffMusic.setChecked(false);
++        baseActivity.pauseMusic();
++    }
++
++    public void SeleccionReiniciar(View view) {
++        if (radioButton6.isChecked()) {
++            Intent intent = new Intent();
++            Context actividad = null;
++            intent.setClass(actividad, actividad.getClass());
++            //llamamos a la actividad
++            actividad.startActivity(intent);
++            //finalizamos la actividad actual
++
++        } else radioButton7.isChecked();
++    }
++
++    public void SeleccionSalir(View view) {
++        if (radioButton8.isChecked()) {
++            Intent intent = new Intent(Intent.ACTION_MAIN);
++            intent.addCategory(Intent.CATEGORY_HOME);
++            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
++            startActivity(intent);
++        } else radioButton9.isChecked();
++    }
++
++    @Override
++    public void onSongClick(int position) {
++        //Todo: popup menu PopupMenu popup = new PopupMenu(BaseActivity.this, button);
++        //      popup.getMenuInflater().inflate(R.menu.popup_menu, popup.getMenu());
++        // popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {
++        // public boolean onMenuItemClick(MenuItem item) {
++        // Todo...
++        //  return true;
++        //  }
++        //Todo: mediaplay play theme
++        //settingsViewModel.setCurrentSong();
++    }
++}
+\ No newline at end of file
+Index: app/src/main/java/com/example/puzzlegame/ui/settings/SettingsViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/settings/SettingsViewModel.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
++++ app/src/main/java/com/example/puzzlegame/ui/settings/SettingsViewModel.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -0,0 +1,103 @@
++package com.example.puzzlegame.ui.settings;
++
++import android.app.Application;
++
++import androidx.lifecycle.LiveData;
++import androidx.lifecycle.MutableLiveData;
++import androidx.lifecycle.ViewModel;
++
++import com.example.puzzlegame.model.MusicSettings;
++import com.example.puzzlegame.model.Song;
++import com.example.puzzlegame.repository.MusicPlayListRepository;
++
++import java.util.List;
++
++public class SettingsViewModel extends ViewModel {
++    private MutableLiveData<Boolean> _musicState;
++    private MutableLiveData<List<Song>> _playList;
++    private MutableLiveData<Integer> _volume;
++    private MutableLiveData<Song> _lastPlayedSong;
++    private MusicPlayListRepository _repo;
++    private MusicSettings settings;
++
++    public SettingsViewModel() {
++        _musicState = new MutableLiveData<>();
++        _playList = new MutableLiveData<>();
++        _volume = new MutableLiveData<>();
++        _lastPlayedSong = new MutableLiveData<>();
++        _repo = MusicPlayListRepository.getInstance();
++    }
++
++    public void initRepository(Application app) {
++        _repo.initMusicPlayListRepository(app);
++        refreshData();
++    }
++    private void refreshData() {
++        boolean state =_repo.getMusicState();
++        settings = _repo.getSettings();
++        _musicState.postValue(state);
++        List<Song> listSong = _repo.getPlayList();
++        _playList.postValue(listSong);
++        _volume.postValue(_repo.getVolume());
++        _lastPlayedSong.setValue(_repo.getLastPlayedSong());
++    }
++
++    public void set_volume(int vol) {
++        _volume.setValue(vol);
++        _repo.setVolume(vol);
++    }
++
++    public void addSong(Song song) {
++        List<Song> aux = _playList.getValue();
++        if (aux == null) return;
++        aux.add(song);
++        _playList.setValue(aux);
++        _repo.setPlayList(aux);
++    }
++
++    public void removeSong(Song song) {
++        List<Song> aux = _playList.getValue();
++        if (aux == null) return;
++        aux.remove(song);
++    }
++
++    public void setMusicPlaying(Boolean state) {
++        _musicState.setValue(state);
++        _repo.setMusicState(state);
++    }
++
++    public LiveData<Song> getLastPlayedSongObservable() {
++        return _lastPlayedSong;
++    }
++
++    public LiveData<Boolean> getMusicStateObservable() {
++        return _musicState;
++    }
++
++    public LiveData<List<Song>> getPlayListObservable() {
++        return _playList;
++    }
++
++    public LiveData<Integer> getVolumeObservable() {
++        return _volume;
++    }
++
++    /**
++     * We take Uri stream in an string to set "main" if the current song playing is the main_theme from raw resources
++     * @param song
++     */
++    public void setCurrentSong(Song song) {
++        _repo.setCurrentSong(song);
++        _lastPlayedSong.setValue(song);
++    }
++
++    public void getStoredLastPlayedSong() {
++        _lastPlayedSong.postValue(_repo.getLastPlayedSong());
++    }
++
++
++    public MusicSettings getSettings() {
++        if (settings == null) return new MusicSettings();
++        return settings;
++    }
++}
+Index: app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenActivity.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenActivity.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -1,27 +1,36 @@
+ package com.example.puzzlegame.ui.winscreen;
+ 
++import android.app.NotificationChannel;
++import android.app.NotificationManager;
+ import android.content.Intent;
++import android.os.Build;
+ import android.os.Bundle;
++import android.provider.CalendarContract;
+ import android.view.View;
+ import android.widget.Button;
+ import android.widget.EditText;
+ import android.widget.TextView;
+ 
+-<<<<<<< Updated upstream
+-=======
+ import androidx.annotation.RequiresApi;
+ import androidx.core.app.NotificationCompat;
+->>>>>>> Stashed changes
++import androidx.core.app.NotificationManagerCompat;
+ import androidx.lifecycle.ViewModelProvider;
+ 
+ import com.example.puzzlegame.R;
+ import com.example.puzzlegame.common.CommonBarMethods;
++import com.example.puzzlegame.common.Utils;
+ import com.example.puzzlegame.model.Score;
+ import com.example.puzzlegame.ui.common.BaseActivity;
+ import com.example.puzzlegame.ui.halloffame.HallOfFameActivity;
+ 
++import java.util.Calendar;
++import java.util.Date;
++
+ public class WinScreenActivity extends BaseActivity {
+ 
++    private static final String CHANNEL_ID = "Record";
++    private static final String CHANNEL_NAME = "Record Name";
++    private static final String CHANNEL_DESC = "Record Description";
+     private WinScreenViewModel winScreenViewModel;
+     private EditText winnerNameTxt;
+     private long winTime;
+@@ -44,6 +53,30 @@
+         init();
+         setViews();
+         setListeners();
++        setNotificationsChannel();
++    }
++
++    private void setNotificationsChannel() {
++        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
++            NotificationChannel channel = new NotificationChannel(CHANNEL_ID, CHANNEL_NAME, NotificationManager.IMPORTANCE_DEFAULT);
++            channel.setDescription(CHANNEL_DESC);
++            NotificationManager manager = getSystemService(NotificationManager.class);
++            manager.createNotificationChannel(channel);
++        }
++    }
++
++    @RequiresApi(api = Build.VERSION_CODES.N)
++    private void addScoreToCalendar(long winTime) {
++        Date beginTime = Calendar.getInstance().getTime();
++        Date endTime = Calendar.getInstance().getTime();
++        Intent intent = new Intent(Intent.ACTION_INSERT)
++                .setData(CalendarContract.Events.CONTENT_URI)
++                .putExtra(CalendarContract.EXTRA_EVENT_BEGIN_TIME, beginTime)
++                .putExtra(CalendarContract.EXTRA_EVENT_END_TIME, Calendar.getInstance().getTime())
++                .putExtra(CalendarContract.Events.TITLE, getString(R.string.congrats))
++                .putExtra(CalendarContract.Events.DESCRIPTION, getString(R.string.record) + Utils.FormatTime(winTime))
++                .putExtra(CalendarContract.Events.EVENT_LOCATION, "Mapuzzled");
++        startActivity(intent);
+     }
+ 
+     private void init() {
+@@ -69,16 +102,25 @@
+                 String winnerName = winnerNameTxt.getText().toString();
+                 Score score = new Score(winnerName, winTime);
+                 if (winScreenViewModel.isRecord(score)) {
+-                    NotificationCompat.Builder builder = new NotificationCompat.Builder(getApplicationContext(),getString(R.string.idcanal) )
+-                            .setSmallIcon(R.drawable.copa_icon)
+-                            .setContentTitle(getString(R.string.record))
+-                            .setContentText(getString(R.string.notiftxt))
+-                            .setPriority(NotificationCompat.PRIORITY_DEFAULT);
+-                };
++                    DisplayNotification();
++                }
+                 winScreenViewModel.saveScore(score);
++                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
++                    addScoreToCalendar(winTime);
++                }
+                 startActivity(new Intent(getApplicationContext(), HallOfFameActivity.class));
+             }
+         });
++    }
+ 
++    private void DisplayNotification() {
++        NotificationCompat.Builder builder =
++                new NotificationCompat.Builder(getApplicationContext(), CHANNEL_ID)
++                .setSmallIcon(R.drawable.copa_icon)
++                .setContentTitle(getString(R.string.congrats))
++                .setContentText(getString(R.string.record) + Utils.FormatTime(winTime))
++                .setPriority(NotificationCompat.PRIORITY_DEFAULT);
++        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(getApplicationContext());
++        notificationManager.notify(1, builder.build());
+     }
+ }
+\ No newline at end of file
+Index: app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenViewModel.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenViewModel.java	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -51,5 +51,5 @@
+         }
+         return true;
+     }
+-}
+ 
++}
+Index: app/src/main/res/drawable/ic_baseline_add_24.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/drawable/ic_baseline_add_24.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
++++ app/src/main/res/drawable/ic_baseline_add_24.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -0,0 +1,5 @@
++<vector android:height="24dp" android:tint="#FFFFFF"
++    android:viewportHeight="24" android:viewportWidth="24"
++    android:width="24dp" xmlns:android="http://schemas.android.com/apk/res/android">
++    <path android:fillColor="@android:color/white" android:pathData="M19,13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/>
++</vector>
+Index: app/src/main/res/layout-v21/activity_gallery.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/layout-v21/activity_gallery.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
++++ app/src/main/res/layout-v21/activity_gallery.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -0,0 +1,39 @@
++<?xml version="1.0" encoding="utf-8"?>
++<androidx.constraintlayout.widget.ConstraintLayout
++    xmlns:android="http://schemas.android.com/apk/res/android"
++    xmlns:app="http://schemas.android.com/apk/res-auto"
++    xmlns:tools="http://schemas.android.com/tools"
++    android:layout_width="match_parent"
++    android:layout_height="match_parent"
++    tools:context=".ui.gallery.GalleryActivity"
++    android:background="@drawable/fondo_amarillo">
++
++    <include
++        android:id="@+id/include"
++        layout="@layout/app_bar_main" />
++
++    <androidx.recyclerview.widget.RecyclerView
++        android:id="@+id/gridGallery"
++        android:layout_width="match_parent"
++        android:layout_height="match_parent"
++        android:layout_marginVertical="60dp"
++        android:layout_marginHorizontal="10dp"
++        android:padding="10dp"
++        android:scrollbars="vertical"
++        app:layout_constraintEnd_toEndOf="parent"
++        app:layout_constraintStart_toStartOf="parent"
++        app:layout_constraintTop_toBottomOf="@+id/include" />
++
++    <com.google.android.material.floatingactionbutton.FloatingActionButton
++        android:id="@+id/addImageButton"
++        android:layout_width="wrap_content"
++        android:layout_height="wrap_content"
++        android:layout_marginBottom="16dp"
++        android:layout_marginEnd="16dp"
++        android:layout_marginRight="16dp"
++        android:src="@drawable/ic_baseline_add_24"
++        android:backgroundTint="@color/colorPrimaryDark"
++        app:layout_constraintBottom_toBottomOf="parent"
++        app:layout_constraintEnd_toEndOf="parent"
++        android:contentDescription="@string/gallery_button" />
++</androidx.constraintlayout.widget.ConstraintLayout>
+\ No newline at end of file
+Index: app/src/main/res/layout/activity_add_score_to_calendar.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/layout/activity_add_score_to_calendar.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
++++ app/src/main/res/layout/activity_add_score_to_calendar.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -0,0 +1,9 @@
++<?xml version="1.0" encoding="utf-8"?>
++<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
++    xmlns:app="http://schemas.android.com/apk/res-auto"
++    xmlns:tools="http://schemas.android.com/tools"
++    android:layout_width="match_parent"
++    android:layout_height="match_parent"
++    tools:context=".ui.AddScoreToCalendar">
++
++</androidx.constraintlayout.widget.ConstraintLayout>
+\ No newline at end of file
+Index: app/src/main/res/layout/activity_gallery.xml
+===================================================================
+--- app/src/main/res/layout/activity_gallery.xml	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/res/layout/activity_gallery.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -23,4 +23,16 @@
+         app:layout_constraintStart_toStartOf="parent"
+         app:layout_constraintTop_toBottomOf="@+id/include" />
+ 
++    <com.google.android.material.floatingactionbutton.FloatingActionButton
++        android:id="@+id/cameraButton"
++        android:layout_width="wrap_content"
++        android:layout_height="wrap_content"
++        android:layout_marginBottom="16dp"
++        android:layout_marginEnd="16dp"
++        android:layout_marginRight="16dp"
++        android:src="@drawable/ic_baseline_add_24"
++        android:backgroundTint="@color/colorPrimaryDark"
++        app:layout_constraintBottom_toBottomOf="parent"
++        app:layout_constraintEnd_toEndOf="parent"
++        android:contentDescription="@string/gallery_button" />
+ </androidx.constraintlayout.widget.ConstraintLayout>
+\ No newline at end of file
+Index: app/src/main/res/layout/activity_select_game.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/layout/activity_select_game.xml	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/res/layout/activity_select_game.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -7,7 +7,7 @@
+     android:layout_height="match_parent"
+     xmlns:tools="http://schemas.android.com/tools"
+     android:background="@drawable/fondo_morado"
+-    tools:context=".ui.SelectGame.SelectGameActivity">
++    tools:context=".ui.selectGame.SelectGameActivity">
+ 
+     <!-- Main AppBar -->
+     <include
+Index: app/src/main/res/layout/activity_select_level.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/layout/activity_select_level.xml	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/res/layout/activity_select_level.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -8,7 +8,7 @@
+     android:layout_height="match_parent"
+     xmlns:tools="http://schemas.android.com/tools"
+     android:background="@drawable/fondo_amarillo"
+-    tools:context=".ui.SelectLevel.SelectLevelActivity">
++    tools:context=".ui.selectLevel.SelectLevelActivity">
+ 
+     <!-- Main AppBar -->
+ 
+Index: app/src/main/res/layout/content_main.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/layout/content_main.xml	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/res/layout/content_main.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -7,7 +7,7 @@
+     app:layout_behavior="@string/appbar_scrolling_view_behavior"
+     tools:showIn="@layout/app_bar_main">
+ 
+-    <fragment
++    <androidx.fragment.app.FragmentContainerView
+         android:id="@+id/nav_host_fragment"
+         android:name="androidx.navigation.fragment.NavHostFragment"
+         android:layout_width="match_parent"
+Index: app/src/main/res/layout/fragment_scrolling_adapter.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/layout/fragment_scrolling_adapter.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
++++ app/src/main/res/layout/fragment_scrolling_adapter.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -0,0 +1,21 @@
++<?xml version="1.0" encoding="utf-8"?>
++<androidx.constraintlayout.widget.ConstraintLayout
++    xmlns:android="http://schemas.android.com/apk/res/android"
++    xmlns:app="http://schemas.android.com/apk/res-auto"
++    android:layout_width="match_parent"
++    android:layout_height="match_parent">
++
++    <RadioButton
++        android:id="@+id/rb_song"
++        android:layout_width="match_parent"
++        android:layout_height="wrap_content"
++        android:layout_gravity="start"
++        android:buttonTint="@color/cardview_light_background"
++        android:text=""
++        android:textColor="?attr/colorAccent"
++        android:textSize="24sp"
++        app:layout_constraintEnd_toEndOf="parent"
++        app:layout_constraintStart_toStartOf="parent"
++        app:layout_constraintTop_toTopOf="parent" />
++
++</androidx.constraintlayout.widget.ConstraintLayout>
+\ No newline at end of file
+Index: app/src/main/res/layout/fragment_scrolling_options.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/layout/fragment_scrolling_options.xml	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/res/layout/fragment_scrolling_options.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -9,18 +9,17 @@
+     android:layout_width="match_parent"
+     android:layout_height="match_parent"
+     xmlns:app="http://schemas.android.com/apk/res-auto"
+-    android:background="@drawable/fondo"
+-    tools:context=".ScrollingFragmentOptions">
++    android:background="@drawable/fondo">
+ 
+     <androidx.appcompat.widget.LinearLayoutCompat
+         android:layout_width="match_parent"
+         android:layout_height="wrap_content"
+-        android:onClick="SeleccionSalir"
+         android:orientation="vertical"
+         android:scrollbarSize="20dp"
+         android:visibility="visible"
+         tools:ignore="UseSwitchCompatOrMaterialXml"
+-        tools:visibility="visible">
++        tools:visibility="visible"
++        tools:context=".ui.common.BaseActivity">
+ 
+         <TextView
+             style="@style/CreditTitlesText"
+@@ -30,8 +29,8 @@
+             android:layout_marginTop="44dp"
+             android:text="@string/musica" />
+ 
+-        <Switch
+-            android:id="@+id/switch1"
++        <androidx.appcompat.widget.SwitchCompat
++            android:id="@+id/switchONOFF"
+             android:layout_width="wrap_content"
+             android:layout_height="wrap_content"
+             android:layout_gravity="center"
+@@ -57,7 +56,7 @@
+             tools:checked="true" />
+ 
+         <SeekBar
+-            android:id="@+id/seekBar"
++            android:id="@+id/volBar"
+             android:layout_width="180dp"
+             android:layout_height="48dp"
+             android:layout_marginStart="174dp"
+@@ -83,7 +82,7 @@
+             android:orientation="vertical">
+ 
+             <RadioButton
+-                android:id="@+id/radioButton1"
++                android:id="@+id/rb_officialTheme"
+                 android:layout_width="wrap_content"
+                 android:layout_height="wrap_content"
+                 android:layout_gravity="start"
+@@ -95,7 +94,7 @@
+                 android:textSize="24sp" />
+ 
+             <RadioButton
+-                android:id="@+id/radioButton2"
++                android:id="@+id/rb_ownerMusic"
+                 android:layout_width="wrap_content"
+                 android:layout_height="wrap_content"
+                 android:layout_gravity="start"
+@@ -108,7 +107,7 @@
+         </RadioGroup>
+ 
+         <Button
+-            android:id="@+id/btn_seleccionar"
++            android:id="@+id/btn_selMusic"
+             style="@style/SmallPurpleButton"
+             android:layout_width="100dp"
+             android:layout_marginStart="260dp"
+@@ -117,49 +116,15 @@
+             app:layout_constraintEnd_toEndOf="parent"
+             app:layout_constraintHorizontal_bias="0.495"
+             app:layout_constraintStart_toStartOf="parent"
+-            app:layout_constraintTop_toBottomOf="@+id/radioButton2" />
++            app:layout_constraintTop_toBottomOf="@+id/rb_ownerMusic" />
+ 
+-        <RadioGroup
++        <androidx.recyclerview.widget.RecyclerView
++            android:id="@+id/RV_songs"
+             android:layout_width="match_parent"
+             android:layout_height="wrap_content"
+             android:orientation="vertical">
+ 
+-            <RadioButton
+-                android:id="@+id/radioButton3"
+-                android:layout_width="wrap_content"
+-                android:layout_height="wrap_content"
+-                android:layout_gravity="start"
+-                android:layout_marginStart="50dp"
+-                android:layout_marginTop="20dp"
+-                android:buttonTint="@color/cardview_light_background"
+-                android:text="@string/Cancion_guardada_1"
+-                android:textColor="?attr/colorAccent"
+-                android:textSize="24sp" />
+-
+-            <RadioButton
+-                android:id="@+id/radioButton4"
+-                android:layout_width="wrap_content"
+-                android:layout_height="wrap_content"
+-                android:layout_gravity="start"
+-                android:layout_marginStart="50dp"
+-                android:layout_marginTop="20dp"
+-                android:buttonTint="@color/cardview_light_background"
+-                android:text="@string/Cancion_guardada_2"
+-                android:textColor="?attr/colorAccent"
+-                android:textSize="24sp" />
+-
+-            <RadioButton
+-                android:id="@+id/radioButton5"
+-                android:layout_width="wrap_content"
+-                android:layout_height="wrap_content"
+-                android:layout_gravity="start"
+-                android:layout_marginStart="50dp"
+-                android:layout_marginTop="20dp"
+-                android:buttonTint="@color/cardview_light_background"
+-                android:text="@string/Cancion_guardada_3"
+-                android:textColor="?attr/colorAccent"
+-                android:textSize="24sp" />
+-        </RadioGroup>
++        </androidx.recyclerview.widget.RecyclerView>
+ 
+         <TextView
+             style="@style/CreditTitlesText"
+Index: app/src/main/res/navigation/mobile_navigation.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/navigation/mobile_navigation.xml	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/res/navigation/mobile_navigation.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -6,7 +6,7 @@
+     app:startDestination="@id/scrollingFragmentOptions">
+     <fragment
+         android:id="@+id/scrollingFragmentOptions"
+-        android:name="com.example.puzzlegame.ScrollingFragmentOptions"
++        android:name="com.example.puzzlegame.ui.settings.SettingsFragment"
+         android:label="fragment_scrolling_options"
+         tools:layout="@layout/fragment_scrolling_options" />
+     <fragment
+Index: app/src/main/res/navigation/nav_graph.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/navigation/nav_graph.xml	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/res/navigation/nav_graph.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -7,7 +7,7 @@
+ 
+     <fragment
+         android:id="@+id/scrollingFragmentOptions2"
+-        android:name="com.example.puzzlegame.ScrollingFragmentOptions"
++        android:name="com.example.puzzlegame.ui.settings.SettingsFragment"
+         android:label="fragment_scrolling_options"
+         tools:layout="@layout/fragment_scrolling_options" />
+ </navigation>
+\ No newline at end of file
+Index: app/src/main/res/values/strings.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/values/strings.xml	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
++++ app/src/main/res/values/strings.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -45,7 +45,7 @@
+ 
+     <!-- adjust menu texts -->
+ 
+-    <string name="on_off">On/Off</string>
++    <string name="on_off">Off/On</string>
+     <string name="cargar_canci_n_propia">Cargar canción propia</string>
+     <string name="mapuzzled_official_theme">Mapuzzled Official Theme</string>
+     <string name="pista">Pista</string>
+@@ -59,9 +59,10 @@
+     <string name="no_prev_games">No hay partidas empezadas</string>
+     <string name="jugar">Jugar</string>
+     <string name="hall_of_fame">Hall of Fame</string>
+-    <string name="record">¡Has batido un nuevo record!</string>
+-    <string name="notiftxt">\"Vas en cabeza con un record de \"</string>
+-    <string name="channel_description">canal de notificaciones de mappuzzled</string>
+-    <string name="idcanal">canal_mapuzzled_01</string>
+-    <string name="canalname">canal de notificaciones mapuzzled</string>
++    <string name="No_AudioFile">No audio File : No se han encontrado archivos de audio</string>
++    <string name="Error_File">Track Failure: Error al intentar cargar el archivo</string>
++    <string name="play_music">Disfruta de tu canción!</string>
++    <string name="record">Has logrado superar el mejor tiempo con : </string>
++    <string name="gallery_button">Imagen de galería</string>
++    <string name="not_available">Funcionalidad no permitida en este dispositivo</string>
+ </resources>
+Index: app/src/main/res/xml/backup_rules.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/xml/backup_rules.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
++++ app/src/main/res/xml/backup_rules.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -0,0 +1,4 @@
++<?xml version="1.0" encoding="utf-8"?>
++<full-backup-content xmlns:tools="http://schemas.android.com/tools">
++    <include domain="sharedpref" path="."/>
++</full-backup-content>
+\ No newline at end of file
+Index: app/src/main/res/xml/file_paths.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/xml/file_paths.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
++++ app/src/main/res/xml/file_paths.xml	(revision 08200b3c150914ecf3315b6cba1f675acea6e2bb)
+@@ -0,0 +1,20 @@
++<?xml version="1.0" encoding="utf-8"?>
++    <paths
++        xmlns:android="http://schemas.android.com/apk/res/android">
++        <root-path name="root" path="." />
++        <external-path
++            name="external"
++            path="." />
++        <external-files-path
++            name="external_files"
++            path="/" />
++        <cache-path
++            name="cache"
++            path="." />
++        <external-cache-path
++            name="external_cache"
++            path="." />
++        <files-path
++            name="files"
++            path="." />
++    </paths>
+diff --git app/src/main/res/raw/happy_african_song.mp3 app/src/main/res/raw/happy_african_song.mp3
+new file mode 100644
+diff --git app/src/main/res/raw/gameplay_song.mp3 app/src/main/res/raw/gameplay_song.mp3
+new file mode 100644
+index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
+GIT binary patch
+literal 0
+Hc$@<O00001
+
+diff --git app/src/main/res/raw/plop.mp3 app/src/main/res/raw/plop.mp3
+new file mode 100644
+index 0000000000000000000000000000000000000000..be024b3f091c15eb9f33b35aef327f86c930ba04
+GIT binary patch
+literal 21942
+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
+
Index: unnamed2.patch
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- unnamed2.patch	(date 1608978666662)
+++ unnamed2.patch	(date 1608978666662)
@@ -0,0 +1,218 @@
+Index: app/src/main/java/com/example/puzzlegame/MainActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/MainActivity.java	(revision 3f5af8550eb1822be8d9c273c801429d181bdf6c)
++++ app/src/main/java/com/example/puzzlegame/MainActivity.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
+@@ -1,9 +1,13 @@
+ package com.example.puzzlegame;
+ 
++import android.app.NotificationChannel;
++import android.app.NotificationManager;
+ import android.content.Intent;
++import android.os.Build;
+ import android.os.Bundle;
+ import android.view.View;
+ import android.widget.Button;
++import androidx.annotation.RequiresApi;
+ 
+ import com.example.puzzlegame.common.CommonBarMethods;
+ import com.example.puzzlegame.repository.GalleryRepository;
+@@ -13,6 +17,7 @@
+ import com.example.puzzlegame.ui.common.BaseActivity;
+ import com.example.puzzlegame.ui.halloffame.HallOfFameActivity;
+ 
++@RequiresApi(api = Build.VERSION_CODES.O)
+ public class MainActivity extends BaseActivity {
+ 
+     Button btn1, btn2;
+@@ -20,6 +25,23 @@
+     GameAppRepository gameAppRepository;
+     GalleryRepository galleryRepository;
+     HallOfFameRepository hallOfFameRepository;
++    NotificationChannel canal=new NotificationChannel(getString(R.string.idcanal),getString(R.string.canalname), NotificationManager.IMPORTANCE_DEFAULT);
++
++    private void createNotificationChannel() {
++        // Create the NotificationChannel, but only on API 26+ because
++        // the NotificationChannel class is new and not in the support library
++        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
++            CharSequence name = getString(R.string.canalname);
++            String description = getString(R.string.channel_description);
++            int importance = NotificationManager.IMPORTANCE_DEFAULT;
++            NotificationChannel channel = new NotificationChannel(getString(R.string.idcanal),getString(R.string.canalname), NotificationManager.IMPORTANCE_DEFAULT);
++            channel.setDescription(description);
++            // Register the channel with the system; you can't change the importance
++            // or other notification behaviors after this
++            NotificationManager notificationManager = getSystemService(NotificationManager.class);
++            notificationManager.createNotificationChannel(channel);
++        }
++    }
+ 
+     @Override
+     protected void onCreate(Bundle savedInstanceState) {
+Index: app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenActivity.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenActivity.java	(revision 3f5af8550eb1822be8d9c273c801429d181bdf6c)
++++ app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenActivity.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
+@@ -7,6 +7,11 @@
+ import android.widget.EditText;
+ import android.widget.TextView;
+ 
++<<<<<<< Updated upstream
++=======
++import androidx.annotation.RequiresApi;
++import androidx.core.app.NotificationCompat;
++>>>>>>> Stashed changes
+ import androidx.lifecycle.ViewModelProvider;
+ 
+ import com.example.puzzlegame.R;
+@@ -63,10 +68,17 @@
+             public void onClick(View v) {
+                 String winnerName = winnerNameTxt.getText().toString();
+                 Score score = new Score(winnerName, winTime);
++                if (winScreenViewModel.isRecord(score)) {
++                    NotificationCompat.Builder builder = new NotificationCompat.Builder(getApplicationContext(),getString(R.string.idcanal) )
++                            .setSmallIcon(R.drawable.copa_icon)
++                            .setContentTitle(getString(R.string.record))
++                            .setContentText(getString(R.string.notiftxt))
++                            .setPriority(NotificationCompat.PRIORITY_DEFAULT);
++                };
+                 winScreenViewModel.saveScore(score);
+-
+                 startActivity(new Intent(getApplicationContext(), HallOfFameActivity.class));
+             }
+         });
++
+     }
+ }
+\ No newline at end of file
+Index: app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenViewModel.java
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenViewModel.java	(revision 3f5af8550eb1822be8d9c273c801429d181bdf6c)
++++ app/src/main/java/com/example/puzzlegame/ui/winscreen/WinScreenViewModel.java	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
+@@ -11,6 +11,8 @@
+ import com.example.puzzlegame.repository.GameAppRepository;
+ import com.example.puzzlegame.repository.HallOfFameRepository;
+ 
++import java.util.List;
++
+ public class WinScreenViewModel extends ViewModel {
+ 
+     private GameSession session;
+@@ -39,4 +41,15 @@
+     public void initRepo(Application application) {
+         hallOfFameRepository.initHallOfFameRepository(application);
+     }
++
++    public Boolean isRecord(Score score) {
++        List<Score> savedScores = hallOfFameRepository.getScores();
++        for (Score sc: savedScores) {
++            if (sc.winTime > score.winTime) {
++                return false;
++            }
++        }
++        return true;
++    }
+ }
++
+Index: app/src/main/res/values/strings.xml
+IDEA additional info:
+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
+<+>UTF-8
+===================================================================
+--- app/src/main/res/values/strings.xml	(revision 3f5af8550eb1822be8d9c273c801429d181bdf6c)
++++ app/src/main/res/values/strings.xml	(revision de0324eadcd57d3a1e766b16a9828d8c0e287aac)
+@@ -59,4 +59,9 @@
+     <string name="no_prev_games">No hay partidas empezadas</string>
+     <string name="jugar">Jugar</string>
+     <string name="hall_of_fame">Hall of Fame</string>
++    <string name="record">¡Has batido un nuevo record!</string>
++    <string name="notiftxt">\"Vas en cabeza con un record de \"</string>
++    <string name="channel_description">canal de notificaciones de mappuzzled</string>
++    <string name="idcanal">canal_mapuzzled_01</string>
++    <string name="canalname">canal de notificaciones mapuzzled</string>
+ </resources>
+diff --git app/src/main/res/drawable/copa_icon.png app/src/main/res/drawable/copa_icon.png
+new file mode 100644
+index 0000000000000000000000000000000000000000..2f34c5f54412b3dbe8c892c366352ac47e12418a
+GIT binary patch
+literal 4432
+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
+E1}0o%SO5S3
+
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"VcsDirectoryMappings\">\r\n    <mapping directory=\"\" vcs=\"Git\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(revision 8492e4796bbe1ac9bbcd96db8e190c7658b4286a)
+++ .idea/vcs.xml	(date 1608978268191)
@@ -2,5 +2,6 @@
 <project version="4">
   <component name="VcsDirectoryMappings">
     <mapping directory="" vcs="Git" />
+    <mapping directory="E:/Mappuzzled2" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
